## Credential Protocol ## {#sctn-credential-protocol}

Defines the ADIA-specific protocol extensions to the Aries `issue-credential` (v1.0) protocol RFC.
These companion protocols are used during issuance, revocation & expiration of the Verifiable Credentials.

<table class="data longlastcol">
  <thead>
    <th>Title</th>
    <th>Description</th>
  </thead>
  <tbody>
  <tr>
    <td nowrap><strong>Credential</strong></td>
    <td>`credential`, `1.0`</td>
  </tr>
    <tr>
      <td nowrap><strong>Motivation</strong></td>
      <td>
        In addition to the Aries `1.0/issue-credential` protocol, there are several ADIA-specific operations
        related to the VC that are required to be supported in the ADIA Spec. E.g. Save VC metadata. This extention protocol
        defines those ADIA-specific operations.
      </td>
    </tr>
  </tbody>
</table>


### Implemented By
* Issuer Agent
* Cloud Agent
* Service Provider Agent

### Roles
* Issuer - Issues, Revokes & Expires VC & Stores the VC in VC Store
* User - Requests, Proposes, Receives the VC
* SP - Requests Proof Presentation to User


### Sub/Co-protocols
This protocol uses following standard Aries protocol messages defined in Aries-RFC <a href="https://github.com/hyperledger/aries-rfcs/blob/master/features/0036-issue-credential">0036-issue-credential</a>

* ```/didcomm.org/1.0/issue-credential``` - as a main protocol to issue a Verifiable Credential

### States
<strong>States for Issuer</strong>
* `signature-requested`
* `signed-vc-received`
* `vc-stored`
* `done`

<strong>States for User (Cloud Agent)</strong>
* `signed-vc-sent`
* `vc-metadata-saved`
* `vc-metadata-updated`
* `vc-metadata-removed`
* `vc-expired`
* `done`


### Protocol Commands

- Following are the <em>companion protocols</em> to the standard `issue-credential` (v1.0) protocol.

#### request-signature (ADIA-CR-001)

<strong>Request - From Issuer to Cloud Agent</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/request-signature",
  "@id": "<uuid-request-signature-12345>",
  "comment": "some comment",
  "attributes": {
    "credentials~attach": [{            // Bas64 encoded credential issued
      "@id": "libindy-cred-0",
      "mime-type": "application/json",
      "data": {
        "base64": "eyJzY2hlbWFfaWQiOiJkaWQ6ZHR4Ono...(clipped)...hIZG85V2JBYUVhcmlFTTI4In0="
      }
    }]
  }
}
```

Description of fields:
* `credentialsAttach` field contains the data of the VC which is being issued. The actual VC data has been base64-encoded in to `/data/base64` field.

<strong>Response - ACK from Cloud Agent</strong>

- A quick respose from the Cloud Agent is just an ACK which notifies that the signature request has been received successfully.

```json
{
  "@type": "https://didcomm.org/credential/1.0/request-signature-ack",
  "@id": "<uuid-request-signature-ack-12345>",
  "status": "OK",
  "~thread": {
    "thid": "<uuid-request-signature-12345>",
    "signature_request_received": true
  }
}
```

#### send-signed-vc (ADIA-CR-002)

<strong>Request - From Cloud Agent to Issuer</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/send-signed-vc",
  "@id": "<uuid-send-signed-vc-12345>",
  "attributes": {
    "credentials~attach": [{
      "@id": "libindy-cred-0",
      "mime-type": "application/json",
      "data": {
          "base64": "eyJzY2hlbWFfaWQiOiJkaWQ6ZHR4Ono...(clipped)...hIZG85V2JBYUVhcmlFTTI4In0="
      },
      "signature": "59aTycBb22Tc48daQd8U149ePebKXX3BfXAWV1aj7g2wfqpjWhBymn8WiHfkfjbCaKMscSplitjyMupNn19Oxup3V"
    }]
  }
}
```

<strong>Response - ACK from Issuer Agent</strong>
- A quick respose from the Issuer Agent is just an ACK which notifies that the signed VC has been received successfully.

```json
{
  "@type": "https://adiassociation.org/credential/1.0/send-signed-vc-ack",
  "@id": "<uuid-send-signed-vc-ack>",
  "status": "{ OK | FAILED | PENDING }",
  "~thread": {
    "thid": "<uuid-send-signed-vc-12345>",
    "message": "e.g. comment or reason of failed request"
    "signed_vc_received": true,
  }
}
```




#### revoke-vc (ADIA-CR-003)
- An Issuing agent may revoke an issued VC and sends a notification to the `Cloud Agent` to notify the user of the revocation.

Note: For the purpose of Auditing, credential metadata records are immutable and any changes or update is a new metadata audit-trail record appended with a last update time.

<strong>Request</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/revoke-vc",
  "@id": "<uuid-revoke-vc-12345>",
  "attributes": {
    "schema_id": "did:key:z6MkpD8tURngJVkoiU9fXQWVRC1LPGJ67pWUTQkBfnPZnVRw:Verified Person:1.5",
    "credential_id": "rngJVkoiU9fXQWVRC1LPGJ67pWUTQkBfnPZnVR",
    "dasUserId": "{DAS_USER_ID}"
  }
}
```

<strong>Response</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/revoke-vc-notification-ack",
  "@id": "<uuid-revoke-vc-notification-ack-12345>",
  "status": "{ OK | FAILED | PENDING }",
  "~thread": {
    "thid": "<uuid-revoke-vc-12345>",
    "message": "e.g. comment or reason of failed request"
  }
}
```

#### expire-vc (ADIA-CR-004)
- The `DAS Agent` updates the expiration status & expirate date of VC and sends a notification to the `Cloud Agent` & to the `Issuer Agent`.

Note: For the purpose of Auditing, credential metadata records are immutable and any changes or update is a new metadata audit-trail record appended with a last update time.

<strong>Request</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/expire-vc",
  "@id": "<uuid-expire-vc-12345>",
  "comment": "VC expired, please remove from VC Store",
  "attributes": {
    "schema_id": "did:key:z6MkpD8tURngJVkoiU9fXQWVRC1LPGJ67pWUTQkBfnPZnVRw:Verified Person:1.5",
    "credential_id": "rngJVkoiU9fXQWVRC1LPGJ67pWUTQkBfnPZnVR",
    "dasUserId": "{DAS_USER_ID}",
    "expirationDate": "ISO 8601 format"
  }
}
```

<strong>Response</strong>

- The `Cloud Agent` and `Issuer Agent` sends back an ACK to the expiration notification.

```json
{
  "@type": "https://adiassociation.org/credential/1.0/expire-vc-notification-ack",
  "@id": "<uuid-expire-vc-notification-ack-12345>",
  "status": "{ OK | FAILED | PENDING }",
  "comment": "VC Removed",
  "~thread": {
    "thid": "<uuid-expire-vc-12345>",
    "message": "e.g. comment or reason of failed request"
  }
}
```


### Standard Protocol Commands

Following standard messages are used as defined in the
[Aries RFC 0036: Issue Credential Protocol 1.0](https://github.com/hyperledger/aries-rfcs/tree/master/features/0036-issue-credential).

#### propose-credential (Aries-RFC-0036-1)

- A sample payload of the `propose-credential` message may look like this.

```json
{
  "@type": "did:sov:BzCbsNYhMrjHiqZDTUASHg;spec/issue-credential/1.0/propose-credential",
  "@id": "<uuid-of-propose-message>",
  "comment": "some comment",
  "credential_proposal": "<json-ld object of the credential proposal>",
  "schema_id": "Schema ID string",
  "cred_def_id": "Credential Definition ID string"
}
```

#### offer-credential (Aries-RFC-0036-2)

- A sample payload of the `offer-credential` message may look like this.

```json
{
  "@id": "c34b2ba6-e111-4486-b726-7c432472732f",
  "@type": "https://didcomm.org/issue-credential/1.0/offer-credential",
  "connection_id": "06c5bd5a-db8d-4377-8d36-710ca3bfcdb2",
  "comment": "some comment",
  "credential_preview": {    // preview object of the credential attributes being issued
    "@id": null,
    "@type": "https://didcomm.org/issue-credential/1.0/credential-preview",
    "attributes": [{
      "name": "firstName",
      "mime-type": "application/json",
      "value": "Edward"
    }, {
      "name": "lastName",
      "mime-type": "application/json",
      "value": "Cullen"
    }, {
      "name": "yearOfBirth",
      "mime-type": "application/json",
      "value": "1994"
    }, {
      "name": "diagnosisMethods",
      "mime-type": "application/json",
      "value": "Mouth Swab"
    }, {
      "name": "diagnosisFacility",
      "mime-type": "application/json",
      "value": "cvsNY"
    }]
  },
  "offers~attach": [{
    "@id": "libindy-cred-offer-0",
    "mime-type": "application/json",
    "data": {
      // Base64 encoding of the credential offer - It contains schema details
      "base64": "eyJzY2hlbWFfaWQiOiJkaWQ6ZHR4Ono2TWtoV1...(clipped)...YW19uIC0gKlIjo9uIC0gKiTm9uZSJ9"
    }
  }]
}
```

#### request-credential (Aries-RFC-0036-3)

- A sample payload of the `request-credential` message may look like this.

```json
{
  "@id": "c34b2ba6-e111-4486-b726-7c432472732f",
  "@type": "https://didcomm.org/issue-credential/1.0/request-credential",
  "~thread": {
    "thid": "c34b2ba6-e111-4486-b726-7c432472732f",
    "sender_order": 0,
    "received_orders": {}
  },
  "comment": "some comment",
  "requests~attach": [{                // Credential Request by Recipient against the offer sent by Sender
    "@id": "libindy-cred-request-0",
    "mime-type": "application/json",
    "data": {
      "base64": "eyJDcmVkZW50aWFsUmVxSnNvbiI6eyJwcm92ZXJfZGlkIjoi...(clipped)...9uIC0gKG5vdCBrbm93biB0byBpc3N1ZXIpIn0="
    }
  }]
}
```
#### issue-credential (Aries-RFC-0036-4)

- A sample payload of the `issue-credential` message may look like this.

```json
{
  "@id": "49f40b8e-5be6-4837-ba65-63a805d90046",
  "@type": "https://didcomm.org/issue-credential/1.0/issue-credential",
  "~thread": {
    "thid": "c34b2ba6-e111-4486-b726-7c432472732f",
    "sender_order": 0,
    "received_orders": {}
  },
  "comment": "some comment",
  "credentials~attach": [{
    "@id": "libindy-cred-0",
    "mime-type": "application/json",
    "data": {
      // Bas64 encoded credential issued by Sender
      "base64": "eyJzY2hlbWFfaWQiOiJkaWQ6ZHR4Ono2...(clipped)...Wnp2MWhIZG85V2JBYUVhcmlFTTI4In0="
    }
  }]
}
```
