## Credential Protocol ## {#sctn-credential-protocol}

Defines the ADIA-specific protocol extensions to the Aries `issue-credential` (v1.0) protocol RFC.
These companion protocols are used during issuance, revocation & expiration of the Verifiable Credentials.

<table class="data longlastcol">
  <thead>
    <th>Title</th>
    <th>Description</th>
  </thead>
  <tbody>
  <tr>
    <td nowrap><strong>Credential</strong></td>
    <td>`credential`, `1.0`</td>
  </tr>
    <tr>
      <td nowrap><strong>Motivation</strong></td>
      <td>
        In addition to the Aries `1.0/issue-credential` protocol, there are several ADIA-specific operations
        related to the VC that are required to be supported in the ADIA Spec. E.g. Save VC metadata. This extention protocol
        defines those ADIA-specific operations.
      </td>
    </tr>
  </tbody>
</table>


### Implemented By
* Issuer Agent
* Cloud Agent
* Service Provider Agent

### Roles
* Issuer - Issues, Revokes & Expires VC & Stores the VC in VC Store
* User - Requests, Proposes, Receives the VC
* SP - Requests Proof Presentation to User


### Sub/Co-protocols
This protocol uses following standard Aries protocol messages defined in Aries-RFC <a href="https://github.com/hyperledger/aries-rfcs/blob/master/features/0036-issue-credential">0036-issue-credential</a>

* ```/didcomm.org/1.0/issue-credential``` - as a main protocol to issue a Verifiable Credential

### States
<strong>States for Issuer</strong>
* `signature-requested`
* `signed-vc-received`
* `vc-stored`
* `done`

<strong>States for User (Cloud Agent)</strong>
* `signed-vc-sent`
* `vc-metadata-saved`
* `vc-metadata-updated`
* `vc-metadata-removed`
* `vc-expired`
* `done`


### Protocol Commands

- Following are the <em>companion protocols</em> to the standard `issue-credential` (v1.0) protocol.

#### request-signature (ADIA-CR-001)

<strong>Request - From Issuer to Cloud Agent</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/request-signature",
  "@id": "<uuid-request-signature-12345>",
  "comment": null,
  "adia": {
    "attributes": {
      "credentialsAttach": [{            // Bas64 encoded credential issued
          "@id": "libindy-cred-0",
          "mime-type": "application/json",
          "data": {
              "base64": "eyJzY2hlbWFfaWQiOiJkaWQ6ZHR4Ono...(clipped)...hIZG85V2JBYUVhcmlFTTI4In0="
          }
      }]
    }
  }
}
```

Description of fields:
* `credentialsAttach` field contains the data of the VC which is being issued. The actual VC data has been base64-encoded in to `/data/base64` field.

<strong>Response - ACK from Cloud Agent</strong>

- A quick respose from the Cloud Agent is just an ACK which notifies that the signature request has been received successfully.

```json
{
  "@type": "https://didcomm.org/credential/1.0/request-signature-ack",
  "@id": "<uuid-request-signature-ack-12345>",
  "status": "OK",
  "~thread": {
    "thid": "<uuid-request-signature-12345>",
    "signature_request_received": true,
  }
}
```

#### send-signed-vc (ADIA-CR-002)

<strong>Request - From Cloud Agent to Issuer</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/send-signed-vc",
  "@id": "<uuid-send-signed-vc-12345>",
  "adia": {
    "attributes": {
      "credentialsAttach": [{
          "@id": "libindy-cred-0",
          "mime-type": "application/json",
          "data": {
              "base64": "eyJzY2hlbWFfaWQiOiJkaWQ6ZHR4Ono...(clipped)...hIZG85V2JBYUVhcmlFTTI4In0="
          },
          "signature": "59nTycBn22T648daQW8U149eP9bKXX3BoXAWV1aj7R2wfqpjWYBymn8WTHfkfDbCaMscSpitjyRAupon19Nxui3V"
        }]
    }
  }
}
```

<strong>Response - ACK from Issuer Agent</strong>
- A quick respose from the Issuer Agent is just an ACK which notifies that the signed VC has been received successfully.

```json
{
  "@type": "https://adiassociation.org/credential/1.0/send-signed-vc-ack",
  "@id": "<uuid-send-signed-vc-ack>",
  "status": "{ OK | FAILED | PENDING }",
  "~thread": {
    "thid": "<uuid-send-signed-vc-12345>",
    "message": "e.g. comment or reason of failed request"
    "signed_vc_received": true,
  }
}
```


#### save-metadata (ADIA-CR-003)
- This message may be implemented as a local function by the `Cloud Agent` or `DAS Agent` and not really a Agent-to-Agent protocol message.

<strong>Request</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/save-metadata",
  "@id": "<uuid-save-metadata-12345>",
  "adia": {
    "attributes": {
      "schemaId": "<unique-id-of-vc-schema>",
      "credentialId": "<unique-id-of-vc>",
      "issuerId": "{ISSUER_ID}",
      "dasUserId": "{DAS_USER_ID}",
      "issuanceDate": "ISO 8601 format",
      "expirationDate": "ISO 8601 format"    //Optional - based on the credential type.
    }
  }
}
```

<strong>Response</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/save-metadata-response",
  "@id": "<uuid-save-metadata-response>",
  "status": "{ OK | FAILED | PENDING }",
  "comment": "Metadata Saved/Failed",
  "~thread": {
    "thid": "<uuid-save-metadata-12345>",
    "message": "e.g. comment or reason of failed request"
  }
}
```

#### search-metadata (ADIA-CR-005)

<strong>Request</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/search-metadata",
  "@id": "<uuid-search-metadata-12345>",
  "adia": {
    "attributes": {
      "issuerId": "{ISSUER_ID}",                //Mandatory - to narrow the search on a specific Issuer
      "dasUserId": "{DAS_USER_ID}",             //Mandatory - to narrow the search on a specific User
      "schemaId": "<unique-id-of-vc-schema>",   //Optional - if available, otherwise will result in all schemas
      "credentialId": "<unique-id-of-vc>"       //Optional - if available, otherwise will result in all credential metadata
    }
  }
}
```

<strong>Response</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/search-metadata-response",
  "@id": "<uuid-search-metadata-response>",
  "status": "{ OK | FAILED | PENDING }",
  "~thread": {
    "thid": "<uuid-search-metadata-12345>",
    "message": "e.g. comment or reason of failed request"
  },
  "searchResult": [{
      "schemaId": "<unique-id-of-vc-schema>",
      "credentialId": "<1-unique-id-of-vc>",
      "issuerId": "{ISSUER_ID}",
      "dasUserId": "{DAS_USER_ID}",
      "issuanceDate": "ISO 8601 format",
      "expirationDate": "ISO 8601 format"
    },
    {
      "schemaId": "<unique-id-of-vc-schema>",
      "credentialId": "<2-unique-id-of-vc>",
      "issuerId": "{ISSUER_ID}",
      "dasUserId": "{DAS_USER_ID}",
      "issuanceDate": "ISO 8601 format",
      "expirationDate": "ISO 8601 format"
    }
    {
      "schemaId": "<unique-id-of-vc-schema>",
      "credentialId": "<3-unique-id-of-vc>",
      "issuerId": "{ISSUER_ID}",
      "dasUserId": "{DAS_USER_ID}",
      "issuanceDate": "ISO 8601 format",
      "expirationDate": "ISO 8601 format"
    }
  ]
}
```

#### remove-metadata (ADIA-CR-006)
- This message may be implemented as a local function by the `Cloud Agent` or `DAS Agent` and not really a Agent-to-Agent protocol message.

<strong>Request</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/remove-metadata",
  "@id": "<uuid-remove-metadata-12345>",
  "adia": {
    "attributes": {
      "schemaId": "<unique-id-of-vc-schema>",
      "credentialId": "<unique-id-of-vc>",
      "issuerId": "{ISSUER_ID}",
      "dasUserId": "{DAS_USER_ID}",
      "issuanceDate": "ISO 8601 format"
    }
  }
}
```

<strong>Response</strong>

```json
{
    "@type": "https://adiassociation.org/credential/1.0/remove-metadata-response",
    "@id": "<uuid-remove-metadata-response>",
    "status": "{ OK | FAILED | PENDING }",
    "~thread": {
      "thid": "<uuid-remove-metadata-12345>",
      "message": "e.g. comment or reason of failed request"
    }
}
```

#### expire-vc (ADIA-CR-007)
- The `DAS Agent` updates the expiration status & expirate date of VC and sends a notification to the `Cloud Agent` & to the `Issuer Agent`.

Note: For the purpose of Auditing, credential metadata records are immutable and any changes or update is a new metadata audit-trail record appended with a last update time.

<strong>Request</strong>

```json
{
  "@type": "https://adiassociation.org/credential/1.0/expire-vc",
  "@id": "<uuid-expire-vc-12345>",
  "comment": "VC expired, please remove from VC Store",
  "adia": {
    "attributes": {
      "schema_id": "did:key:z6MkpD8tURngJVkoiU9fXQWVRC1LPGJ67pWUTQkBfnPZnVRw:Verified Person:1.5",
      "credential_id": "rngJVkoiU9fXQWVRC1LPGJ67pWUTQkBfnPZnVR",
      "dasUserId": "{DAS_USER_ID}",
      "expirationDate": "ISO 8601 format"
    }
  }
}
```

<strong>Response</strong>

- The `Cloud Agent` and `Issuer Agent` sends back an ACK to the expiration notification.

```json
{
    "@type": "https://adiassociation.org/credential/1.0/expire-vc-notification-ack",
    "@id": "<uuid-expire-vc-notification-ack-12345>",
    "status": "{ OK | FAILED | PENDING }",
    "comment": "VC Removed",
    "~thread": {
      "thid": "<uuid-expire-vc-12345>",
      "message": "e.g. comment or reason of failed request"
    }
}
```


### Standard Protocol Commands

Following standard messages are used as defined in the
[Aries RFC 0036: Issue Credential Protocol 1.0](https://github.com/hyperledger/aries-rfcs/tree/master/features/0036-issue-credential).

#### propose-credential (Aries-RFC-0036-1)
#### offer-credential (Aries-RFC-0036-2)
#### request-credential (Aries-RFC-0036-3)
#### issue-credential (Aries-RFC-0036-4)
