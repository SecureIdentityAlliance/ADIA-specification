#### Protocols for interaction #### {#sctn-gadi-global-protocol}
Existing

##### DID Exchange ##### {#sctn-gadi-global-did-exchange}

New
##### Credential Listing ##### {#sctn-gadi-global-credential-message}
[NORMATIVE]

    <dl>
        : CredentialListingUpdate //do we just add, or can we remove old listed things?
        :: Credential // how does this interface with credential exchange?

        : CredentialListingUpdateError
        :: Invalid Credential
        :: Duplicate detected

        : CredentialListingRemove
    </dl>

##### Directory Query ##### {#sctn-gadi-global-query-message}
[NORMATIVE]

// should this be a ‘one match only’ query protocol? As opposed to a directory that will return multiple matches?
    <dl>
        : DirectorySingleQuery directory
        :: Attributes
        : DirectorySingleResult
        :: DID
        : DirectorySingleEmpty // or is this a case of Result?
        : DirectorySingleConflict
        :: Attributes needed to resolve multiple answers
    </dl>

##### Trust Anchor Protocol ##### {#sctn-gadi-global-query-message}
[NORMATIVE]

    <dl>
        : Trust Anchor Protocol

            This protocol facilitates the retrieval of a Trust Anchor for the purposes of identifying unique registrants in a directory. Each directory is responsible for maintaining uniqueness in a directory, and creates a unique identifier for each party listed. This trust anchor is the same no matter how the user is identified.

            Trust Anchors have been kept isolated from the other directory related protocols to allow specific permissioning to use trust anchors.

        : Participants

            **Directory** - Maintains connections to a user, alongside the DIDs issued to each service for the user, and each user's Trust Anchor.
            **Service** - The party requesting the Trust Anchor.
            **User** - Receives notification about Trust Anchor release.


        : Protocol

            **Name**: TrustAnchor v0.1
            **Protocol Type URI**:
            ```http://<protocolhost>/trustanchor/0.1/```

        : Prerequisites

            Prior to use of this protocol, the Service must have received a DID for a user from the directory. This may be accomplished with the Digital Address protocol or similar. This requires that the user must have registered with the Directory.

            The Directory MUST have requirements for which Services it will allow to receive Trust Anchors. Qualification of those services should be performed prior to serving `Retrieve` requests. The process of qualifying those services is outside the scope of this protocol.

        : Messages

        :: Request
            Sent by the Service to the Directory.
            - `did` - The DID of the user for which the Service is requesting a Trust Anchor.

            ```json
            {
                "@id": "978654364758"
                "@type": "http://<protocolhost>/trustanchor/0.1/request",
                "did": "did:example:userdid"
            }
            ```

        :: Release
            Sent by the Directory to the Service in response to a `Request`.
            - `did` - The DID of the user for which the Service is requesting a Trust Anchor.
            - `trust_anchor` - The Trust Anchor of the user.

            ```json
            {
                "@id": "4568765",
                "~thread": {
                    "thid": "978654364758",
                },
                "@type": "http://<protocolhost>/trustanchor/0.1/release",
                "did": "did:example:userdid",
                "trustanchor": "exampletrustanchor@directory"
            }
            ```

        :: ReleaseNotification
            - `trust_anchor` - The Trust Anchor which was released corresponding to the DID which was requested.
            - `did` - DID for which the Trust Anchor was requested.
            - `service_did` - DID of the service requesting Trust Anchor resolution.

            ```json
            {
                "@id": "34252435",
                "@type": "http://<protocolhost>/trustanchor/0.1/releasenotification",
                "did": "did:example:userdid",
                "trust_anchor": "exampletrustanchor@directory",
                "service_did": "did:of:service"
            }
            ```

        :: Error
            Sent by the Directory to the Service in response to a `resolve` message when a match is not found for the provided DID.
            - `did` - DID sent in request
            - `reason` - the reason for the error.
                - DID Not Found
                - Not Authorized

            ```json
            {
                "@id": "06798607980769",
                "~thread": {
                    "thid": "978654364758",
                },
                "@type": "http://<protocolhost>/trustanchor/0.1/unknown",
                "did": "did:example:userdid",
                "reason": "DID Not Found"
            }
            ```

        : Notes
            - This protocol requires that Directories retain a record of which user's DID was released to which party. When a Trust Anchor Request is made, it must only disclose the user's Trust Anchor to a party that has previously been given a DID for that user, and qualifies for the trusted role.

        : Issues
            - What is necessary to identify a service?
            - Does the user benefit from having the Trust Anchor value released to them?

    </dl>

##### Digital Address Protocol ##### {#sctn-gadi-global-da-message}
[NORMATIVE]

Issue: Digital Address as username? Keep this protocol separate?

    <dl>
        : Digital Address Protocol

        : Overview
            This protocol is used between mulitple parties to manage the registration and lookup of a Digital Address, unique to the GADI Ecosystem.

            Digital Addresses are a human friendly string that facilitates the retrieval of a DID for the user who presents the Digital Address.

        :: Participants

            **Directory** - Maintains connections to a user, alongside the Digital Address(es) registered by the user. Retrieves DIDs from the User and distributes them to Services upon match of a Digital Address.
            **User** - Connects to the directory and registers Digital Addresses. Provides DIDs to the directory for distribution to Services who look up the Digital Address.
            **Service** - The party who looks up the Digital Address, after having received the Digital Address from the User. (Not the right name.)

        :: Protocol

            **Name**: DigitalAddress v0.1
            **Protocol Type URI**:
            ```http://<protocolhost>/digitaladdress/0.1/```

        :: Prerequisites

            Prior to use of this protocol, the User needs to have a relationship with the Directory.

            The Directory may have requirements to satisfy regarding which users they will serve with Digital Address lookup. The process of verifying users should be performed prior to use of this protocol by the User, and is outside the scope of this protocol.

            The Directory may also have requirements for which Services it will allow to submit queries. Qualification of those services should be performed prior to serving `Resolve` requests. The process of qualifying those services is outside the scope of this protocol.

        : Messages

        :: Register
            Sent by the User to the Directory.
            Sent once per Digital Address being registered.
            - `digital_address` - The Digital Address to register with the Directory.

            ```json
            {
                "@id": "978654364758"
                "@type": "http://<protocolhost>/digitaladdress/0.1/register",
                "digital_address": "exampledigitaladdress"
            }
            ```

        :: Remove
            Sent by the User to the Directory. This comprises the request to remove a previously
            - `digital_address`

            ```json
            {
                "@id": "4568765"
                "@type": "http://<protocolhost>/digitaladdress/0.1/remove",
                "digital_address": "exampledigitaladdress"
            }
            ```

        :: RegistrationStatus
            Sent by the Directory to the User after a registration has changed
            - `digital_address`
            - `status` ['registered', 'removed', 'duplicate', 'rejected', 'unknown']
                - registered: Newly submitted address has been properly registered.
                - removed - digital_address has been removed.
                - duplicate - Register message specifies a digital_address registered to another user.
                - rejected - Register message specifies a digital_address that has been rejected by the Directory.
                - unknown - Remove specifies a digital address not registered to the user who sent the message.

            ```json
            {
                "@id": "123476432"
                "~thread": {
                    "thid": "978654364758",
                },
                "@type": "http://<protocolhost>/digitaladdress/0.1/registrationstatus",
                "digital_address": "exampledigitaladdress",
                "status": "registered"
            }
            ```

        :: DIDRequest
            - `digital_address` - The Digital Address for which a DID is being requested.

            ```json
            {
                "@id": "345674463536"
                "@type": "http://<protocolhost>/digitaladdress/0.1/didrequest",
                "digital_address": "exampledigitaladdress"
            }
            ```

        :: DID
            - `did` - The DID to provide to the Service.

            ```json
            {
                "@id": "34252435"
                "~thread": {
                    "thid": "345674463536",
                },
                "@type": "http://<protocolhost>/digitaladdress/0.1/did",
                "did": "did:example:uniquedid"
            }
            ```

        :: DIDReceipt
            - `digital_address` - The Digital Address for which a DID is being requested.
            - `did_disclosed` - DID revealed to the other party.
            - `service_did` - DID of the service requesting Digital Address resolution.

            ```json
            {
                "@id": "34252435"
                "~thread": {
                    "thid": "345674463536",
                },
                "@type": "http://<protocolhost>/digitaladdress/0.1/didreceipt",
                "did_disclosed": "did:example:uniquedid",
                "digital_address": "exampledigitaladdress",
                "service_did": "did:of:service"
            }
            ```

        :: Resolve
            Sent by a Service to the Directory to retrieve a DID for the supplied digital_address. The digital address will be provided to the Service outside this protocol.
            - `digital_address`

            ```json
            {
                "@id": "202102189"
                "@type": "http://<protocolhost>/digitaladdress/0.1/resolve",
                "digital_address": "exampledigitaladdress"
            }
            ```

        :: ResolutionResult
            Sent by the Directory to the Service in response to a `resolve` message when a match is found.
            - `digital_address`
            - `did`

            ```json
            {
                "@id": "06798607980769"
                "~thread": {
                    "thid": "202102189",
                },
                "@type": "http://<protocolhost>/digitaladdress/0.1/resolutionresult",
                "digital_address": "exampledigitaladdress",
                "did": "did:example:uniquedid"
            }
            ```

        :: Unknown
            Sent by the Directory to the Service in response to a `resolve` message when a match is not found for the provided digital_address.
            - `digital_address`

            ```json
            {
                "@id": "06798607980769"
                "~thread": {
                    "thid": "202102189",
                },
                "@type": "http://<protocolhost>/digitaladdress/0.1/unknown",
                "digital_address": "exampledigitaladdress"
            }
            ```

        : Notes
            - This protocol assumes that the Directory will retrieve and cache DIDs for sending to Services. The Directory will then notifiy the User which DID was disclosed to which Service, and for which Digital Address. An adjustment to this protocol could include real-time requests for disclosure, which has different consent properties.

        : Issues
            - What is necessary to identify a service?

    </dl>

    <dl>
        : DirectoryDIDRequest // get DID to later disclose
        :: Who gets it (optional, for cache if omitted)
        : DirectoryDIDAllocate //grant?
        :: DID
        : DirectoryDIDReceipt //already happened
        :: Who got it.  (DID? Attributes)
        :: Which DID.
        :: Which Digital Address  / attribute set

        :: //discovery? Is there a way to discover a directory schema prior to listing or querying?
        :: //did or invitation? Kind of same thing? Rotation expected?
    </dl>
