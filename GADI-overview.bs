<!-- -*- mode: Text; eval: (auto-fill-mode 1); -*- -->
<pre class='metadata'>
Title: DID Alliance GADI Overview
Shortname: gadi-overview
Prepare for TR: true
Level: 1
Status: ED
Group: fido
URL:
Editor: Rolf Lindemann, rolf@noknok.com
Editor: Kiran Addepalli, kiran@digitaltrust.net
Abstract: DID Alliance GADI Overview
Issue Tracking: GitHub https://github.com/DIDAlliance/DID-specification
Text Macro: INFORMATIVE <em>This section is not normative.</em>
Text Macro: NORMATIVE <em>This section is normative.</em>
Boilerplate: omit conformance, omit feedback-header, omit abstract-header
Markup Shorthands: css off, markdown on
</pre>

<pre class="link-defaults">
spec:html; type:dfn; for:environment settings object; text:global object
spec:infra; type:dfn; text:list
spec:url; type:dfn; text:domain
spec:url; type:dfn; text:valid domain;
spec:webappsec-credential-management-1; type:dictionary; for:/; text:CredentialRequestOptions
spec:webidl; type:interface; text:Promise
</pre>

<!-- only put content here if you want a custom status of document not
  the specification-maturity-appropriate boilerplate -->

# Global Architecture for Digital Identity # {#sctn-gadi}
The Global Architecture for Digital Identity (GADI) allows users to
share credentials that have been asserted by an issuer with service
providers in a verifiable manner.

## Ecosystem Overview ## {#sctn-ecosystem-overview}

<figure id="fig-gadi-overview">
    <img src="images/GADI-overview.png"/>
    <figcaption>GADI Overview</figcaption>
</figure>

## Entities ## {#sctn-entities}

<dl>
    : <dfn>Cloud Agent</dfn>
    :: A cloud accessible entity that acts on behalf of the user. It has some similarity to the
         eIDAS Trust Service Providers (https://ec.europa.eu/digital-single-market/en/trust-services).

    : <dfn>Credential Broker</dfn>
    ::

Issue: TODO    

    : <dfn>DA</dfn>
    :: Human readabe <dfn>Digital Address</dfn> of the <a>User</a> (e.g. john.doe@issuer.dap.gadi.org).

    : <dfn>DAP_USER_ID</dfn>
    :: The DAP specific Decentralized Identifier (DID) related to the <a>DA</a>, e.g. did:example:123456789abcdefghi

    :  <dfn>DAP_USER_ID_PK</dfn>, <dfn>DAP_USER_ID_SK</dfn>
    :: Public Key (PK) and Private Key (SK) related to the <a>DAP_USER_ID</a>.

    :  <dfn>DAA</dfn>
    :: Digital Address Application, e.g. Android App or iOS App that
        knows how to talk to the <a>DAP Agency</a> on behalf of the <a>User</a>.

    :  <dfn>DAP Agency</dfn> (formerly DAP)
    :: Digital Address Provider Agency.  See [[DAP-API]] for the DAP
        Agency API.  Multiple DAP Agencies can exist in the GADI "universe".

    :  <dfn>DAP_ID</dfn>
    :: <a>DAP Agency</a> IDentity, i.e. the W3C DID style identifier for the <a>DAP Agency</a>.

    :  <dfn>DAP_ID_PK</dfn>, <dfn>DAP_IS_SK</dfn>
    :: Public Key (PK) and Private Key (SK) related to the <a>DAP_ID</a>.

    : <dfn>DID</dfn>
    :: Decentralized Identifier according to [[!did-core]]

    : <dfn>GADI</dfn>
    :: Global Architecture for Digital IDentity. See [[GADI-API]] for the DAP API.

    :  <dfn>HIDA</dfn>
    :: Cryptographic hash computed over the <a>ID Attributes</a>

    :  <dfn>HomeDAP_ID</dfn>
    :: DAP_ID of the <a>DAP Agency</a> that user primarliy belongs to (i.e. <dfn>HomeDAP</dfn>).

    :  <dfn>ID Attributes</dfn>
    :: Attributes identifying a user uniquely, i.e. firstname, last name, date of birth, country of birth, city of birth.

    :  <dfn>Identity Escrow</dfn>
    :: 

Issue: TODO    

    :  <dfn>Issuer</dfn>
    :: Issuer of <a>VC</a>s to users.  GADI supports multiple Issuers
        per <a>User</a>.  Issuers use an <dfn>Issuer Agent</dfn> to
        connect to the <a>DAP Agency</a>.

    :  <dfn>ISSUER_ID</dfn>
    :: Issuer IDentity, i.e. the <a>DID</a> style identifier for the <a>Issuer</a>.

    :  <dfn>ISSUER_ID_PK</dfn>, <dfn>ISSUER_IS_SK</dfn>
    :: Public Key (PK) and Private Key (SK) related to the <a>ISSUER_ID</a>.

    :  <dfn>SP</dfn>
    :: <dfn>Service Provider</dfn> that verifies <a>VC</a>s.  In the
         Decentralized Identity community it is typically called
         Verifier. <a>Service Providers</a> use a <dfn>Service Provider Agent</dfn> to
         connect to the <a>DAP Agency</a>, the <a>Credential Broker</a> and the <a>Identity Escrow</a>.

    :  <dfn>SP_ID</dfn>
    :: Service Provider IDentity, i.e. the <a>DID</a> style identifier for the <a>SP</a>.

    :  <dfn>SP_ID_PK</dfn>, <dfn>SP_IS_SK</dfn>
    :: Public Key (PK) and Private Key (SK) related to the <a>SP_ID</a>.

    : <dfn>TA</dfn>
    :: <dfn>Trust Anchor</dfn>, i.e. a randomly generated number related to a User. E.g. 3456893265abf...849287c.


Issue: Why do we need the TA?  It doesn't directly appear in any sequence diagram so far.


    :  <dfn>TA_USER_ISSUER</dfn>
    :: The <a>Issuer</a> specific <a>TA</a>, i.e. hash(<a>TA</a>, <a>ISSUER_ID</a>).

    :  <dfn>User</dfn>
    :: The User and owner of the <a>DA</a> and holder of the <a>VC</a>s.

    :  <dfn>VC</dfn>
    :: <dfn>Verifiable Credential</dfn>, see [[!vc-data-model]].

    :  <dfn>VC_METADATA</dfn>
    :: Metadata of a <a>VC</a>, i.e. <a>DID</a>, VC Schema Name, VC Schema Friendly Name

</dl>

### GADI Regional Directory

A directory serves to identify participants with an ecosystem. This can make it easier for users without a digital device or knowledge of how to use one. Users can be looked up by attributes or a digital address, both of which are discussed in this spec.

#### Directory Scope
Each directory serves a particular scope. Scopes can be geopolitical, like a country, or organizational, such as a multi-national medical organization or a university. Each directory serves to uniquely identify each participant via digital address or a collection of attributes. 

Directory scopes can and will overlap. A university may run a directory for students and faculty in a country where a directory is run for the country. People may be listed in multiple directories without conflict. Initial directories will be run by GADI to seed the ecosystem. Other entities may operate directories in conformance with the governance structure and APIs.

#### Attribute selection and management
Each directory has a set of attributes used to list users in the directory. These attributes are received via credentials from issuers authorized by the appropriate governance framework. When necessary for uniqueness (described in the next section), the directory may request additional attributes from a user, also supplied via credentials.

Directories may use any datastore sufficient to the requirements of storing attributes. Datastores MUST be able to remove listed records at the request of the user.

#### Uniqueness properties
GADI Directories ensure uniqueness of the listed users. This is done by ensuring a unique set of attributes for each user. If a new user matches an existing user, additional attributes MUST be requested for use in distinguishing between the matching users.

Each directory MUST have a process to follow when users cannot be uniquely identified either during addition of a user to the directory or during lookup of a user within the directory.

#### Hashed Attributes
Directories (MAY/MUST TBD) store only hashed attributes and accept hashed attribute queries. This prevents the directory from directly knowing the attributes involved. This requires the issuance of a credential that contains hashed user attributes from the issuer, used for listing in a directory.

Issue: Discuss the tradeoffs between hashed/unhashed attributes within regional directories. For example, the GADI regional directory for the EU may require hashed attributes, while a companies supporting solar energy directory may not require hashing of it's attributes.

#### Digital address
Digital Addresses function as a human friendly identifier for end users to use in lieu of sharing attributes for directory lookup. The digital address contains a directory identifier in addition to the identifier linked to the user. 

Digital Addresses MAY contain PII, but the user MUST be warned if they choose one containing PII and MUST be allowed to choose a digital address that does not contain PII.

A single user MAY have multiple digital addresses that all link to the same user in the directory. Any of the linked digital addresses can be used to identify the user. Digital addresses do not function as a mechanism of uniqueness. 

#### Listing Modifications
Users are listed in a directory by creating a DIDComm connection with the directory, then presenting credentials containing attributes issued by an acceptable issuer as determined by the governance framework. 

The user lists a digital address by communicating that intent over the DIDComm connection with the directory.

When the user desires to be removed from the directory, they indicate that over the existing DIDComm connection.

These interactions are all detailed in the associated protocols summarized and linked below.

#### Directory Querying
A qualified party may query the directory by providing attributes or a digital address. The directory will either return a ‘None Found’ response, or a DID of the user identified. The DID provided is created by the user’s agent, and provided to the directory for the purpose of returning to the party querying the directory. The user’s agent is notified of which party identified them in the directory.

The protocols for querying users are summarized and linked below.

#### Logging requirements
Directories MUST log all listing modifications and queries.

#### Protocols for interaction
Existing

New



## Trust Model ## {#sctn-trust-model}

Issue: Describe what is verified by whom, what kind of objects
   ("credentials") are being created and what kind of identifiers they
   bind together (e.g. public keys and digital addresses, ...).


# Inter-domain Communication # {#sctn-interd-comm}

# Security Considerations # {#sctn-security-considerations}


# Operations # {#sctn-ops}

## User Onboarding to First Issuer ## {#sctn-onboarding-1st-issuer}

<figure id="fig-onboarding-1st-issuer">
    <img src="sequence-diagrams/User-onboarding-to-first-issuer.svg"/>
    <figcaption>User Onboarding to First Issuer</figcaption>
</figure>

Note: <a>HIDA</a> is PII and might need to be erased on account deletion (see User <a>DAP Agency</a> Account Deletion)

Issue: Check <a>DAP_USER_ID_PK</a>/<a>DAP_USER_ID_SK</a> generation. Would we store the PK in <a>HomeDAP</a> or GADI??  When will that key be created and by Whom?


## Verifiable Credential Issuance ## {#sctn-vc-issuance-1}

<figure id="fig-vc-issuance-option-1">
    <img src="sequence-diagrams/VC-Issuance-Option-1.svg"/>
    <figcaption>Verifiable Credential Issuance (Option 1)</figcaption>
</figure>

  <a>Issuer</a>s have access to <a>HIDA</a> and hence could ask GADI via <a>DAP Agency</a> to lookup <a>TA_USER_ISSUER</a> by <a>HIDA</a>.

Issue: Explain what "Invite the Cloud  Agent for DIDcomm conn" mean in detail, i.e. which keys are involved, what kind of encryption/integrity protection method is used, any channel binding?, etc. [[!didcomm-messaging]].

Issue: Distinguish two different cases: (1) DA Issuer and VC Issuer are part of same DAP Agency.
       (2) DA Issuer and VC Issuer are part of different DAP
       Agencies.  See github issue 53.

## Verifiable Credential Presentation and Verification ## {#sctn-vc-presentation-and-verification-1}

Goal of this operation is to provide some identity attributes related to the user with the Service Provider (<a>SP</a>).
  These attributes are include in the <a>verifiable credential</a> and have been verified by the <a>Issuer</a>.
  We always use <dfn>Verifiable Presentations</dfn> as defined by [[!vc-data-model]] (https://www.w3.org/TR/vc-data-model/#dfn-verifiable-presentations).

We distinguish 2 different types of <a>verifiable credential</a>s:
1. Credentials that include sufficient personal identifiable information to uniquely identify the user and
2. Credentials that don't. For example just stating that the user is older than 21.

In both cases, a public key is typically linked to the <a>verifiable credential</a> via the subject's DID document (see example 2 in [[did-core]]).
  It is used as a proxy for the user, meaning anyone that can proof access of the related private key is assumed to be the user.
  Consequently, in case (2), the public key - if it is included - will never appear publicly with a link to the user record. Instead, it will be a
  temporary use key, that is included in order to allow the <a>SP</a> to detect which subject the attributes relate to.

Issue: This is true for case 1, but how does it work in case 2?

<figure id="fig-vc-presentation-and-verification-option-1">
    <img src="sequence-diagrams/VC-Presentation-and-Verification-Option-1.svg"/>
    <figcaption>Verifiable Presentation and Verification (Option 1)</figcaption>
</figure>

Issue: For an anonymous verifiable presentation, we need to run some "join" protocol between the <a>DAA</a> and/or <a>Cloud Agent</a> and the <a>DAP Agency</a>/GADI system.

Issue: Having the <a>DAA</a> authenticate with FIDO to <a>Cloud Agent</a> either requires second FIDO credential (tied to <a>Cloud Agent</a>) or it requires the <a>Cloud Agent</a> to allow use of the <a>DAP Agency</a> related FIDO credential

Issue: Describe, how the <a>SP</a> can verify whether an <a>ISSUER_ID_PK</a> is trustworthy or not (introduced through the <a>DAP Agency</a>).  And in the next step how to verify whether <a>DAP_ID_PK</a> is trustworthy or not.


## User Onboarding Attempt to 2nd Issuer ## {#sctn-onboarding-2nd-issuer}

<figure id="fig-onboarding-2nd-issuer">
    <img src="sequence-diagrams/User-onboarding-to-second-issuer.svg"/>
    <figcaption>User Onboarding to Second Issuer</figcaption>
</figure>


## User DAP Account Deletion ## {#sctn-user-dap-account-deletion}

<figure id="fig-user-dap-account-deletion">
    <img src="sequence-diagrams/User-DAP-Account-Deletion.svg"/>
    <figcaption>User DAP Account Deletion</figcaption>
</figure>

Issue: <a>Cloud Agent</a> needs to be added - it maintains cryptographic keys on behalf on the user

Issue: Is it expected that <a>Issuer</a> relations are not deleted?  Maybe <a>DAP Agency</a> Account deletion should be just a part of <a>Issuer</a> account deletion?

Issue: Do we need an issuer-triggered account deletion function as well?

Issue: Is it expected that VCs are not deleted?

Issue: How could a user without a working <a>DAA</a> instance trigger account deletion?


## User Bootstraps New DAA Instance "Lost Phone" ## {#sctn-user-bootstraps-new-daa-instance-1}

<figure id="fig-user-bootstraps-new-daa-instance">
    <img src="sequence-diagrams/User-bootstrap-new-DAA-instance.svg"/>
    <figcaption>User Bootstraps New DAA Instance "Lost Phone"</figcaption>
</figure>

Issue: requiring ID Proofing looks expensive here. Are there methods without that (that provide a similar security level)?

Issue: Do we want <a>DAP Agency</a> to perform the ID proofing - not the <a>Issuer</a>?

## User Changes Home-DAP ## {#sctn-user-changes-home-dap}


# Data Schema # {#sctn-data-schema}


  ## DAP Agency Data Schemas ## {#sctn-dap-agency-data-schemas}

  ### <dfn>DigitalAddress</dfn> ### {#sctn-model-da}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>entityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>entityDigitalAddress</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>entityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>ServiceProvider</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>primaryHash</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>secondaryHash</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>status</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Active</li>
              <li>Pending </li>
              <li>Inactive</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>createdBy</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>createdDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
      </tbody>
    </table>

  ### <dfn>DigitalAddressCriteria</dfn> ### {#sctn-model-dac}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>entityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>entityDigitalAddress</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>entityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>ServiceProvider</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>status</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Active</li>
              <li>Pending </li>
              <li>Inactive</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>createdBy</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>fromDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>toDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
      </tbody>
    </table>


    ### <dfn>CredentialSchema</dfn> ### {#sctn-model-credential-schema}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>credentialSchemaId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>name</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>version</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>description</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>published</td>
          <td>Boolean</td>
          <td></td>
        </tr>
        <tr>
          <td>publishedDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>publishingEntityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>publishingEntityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>revoked</td>
          <td>Boolean</td>
          <td></td>
        </tr>
        <tr>
          <td>revokedDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>revokingEntityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>revokingEntityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>createdBy</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>createdDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
      </tbody>
    </table>

    ### <dfn>CredentialCriteria</dfn> ### {#sctn-model-credential-criteria}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>credentialSchemaId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>credentialId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>userDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>verifierDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>issuingEntityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>active</td>
          <td>Boolean</td>
          <td></td>
        </tr>
        <tr>
          <td>fromDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>toDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>createdBy</td>
          <td>String</td>
          <td></td>
        </tr>
      </tbody>
    </table>

    ### <dfn>CredentialMetadata</dfn> ### {#sctn-model-credential-metadata}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>credentialId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>name</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>credentialSchemaId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>credentialSchemaVersion</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>issuedEntityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>issuedEntityDA</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>issuedEntityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>issuedDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>issuingEntityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>issuingEntityDA</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>issuingEntityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>active</td>
          <td>Boolean</td>
          <td></td>
        </tr>


        <tr>
          <td>revoked</td>
          <td>Boolean</td>
          <td></td>
        </tr>
        <tr>
          <td>revokedDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>revokingEntityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>revokingEntityDA</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>revokingEntityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>dapDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>dapDA</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>createdBy</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>createdDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
      </tbody>
    </table>

    ### <dfn>CredentialMetadataCriteria</dfn> ### {#sctn-model-credential-metadata-criteria}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>issuingEntityDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>issuingEntityRole</td>
          <td>Enum</td>
          <td>
            <ul>
              <li>Issuer</li>
              <li>DAP</li>
            </ul>
          </td>
        </tr>
        <tr>
          <td>verifierDID</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>credentialId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>credentialSchemaId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>active</td>
          <td>Boolean</td>
          <td></td>
        </tr>
        <tr>
          <td>createdBy</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>fromDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>toDate</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
      </tbody>
    </table>

    ### <dfn>FidoCommandRequest</dfn> ### {#sctn-model-fido-command-request}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>appId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>deviceId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>loginId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>packageName</td>
          <td>String</td>
          <td></td>
        </tr>

      </tbody>
    </table>

    ### <dfn>FidoCommandResponse</dfn> ### {#sctn-model-fido-command-response}
    <table class="complex data longlastcol">
      <thead>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <td>deviceId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>expireTime</td>
          <td>DateTime format: date-time</td>
          <td></td>
        </tr>
        <tr>
          <td>isRegistered</td>
          <td>Boolean</td>
          <td></td>
        </tr>
        <tr>
          <td>loginId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>opURL</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>protocol</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>resultCode</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>resultMsg</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>siteId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>svcId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>svcTrId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>trId</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>trStatus</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>trStatusMsg</td>
          <td>String</td>
          <td></td>
        </tr>

        </tbody>
      </table>

# GADI API # {#sctn-gadi-api}

## Directory Resource ## {#sctn-directory-resource}

  <!-- Start: Create Digital address -->
### Create Digital Address ### {#sctn-gadi-create-da}

#### Request #### {#sctn-gadi-create-da-req}

<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/directory/digital-address</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>POST</td>
 </tr>
 <tr>
  <th>Consumes</th>
    <td>
      This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

      * <code>application/json</code>

    </td>
   </tr>
   <tr>
    <th>Request body</th>
     <td>
      <div class="param">body <a>DigitalAddress</a> (required)</div>
      <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Payload contains the primary and secondary hashes created from the core attributes provided by the user and persisted to the GADI Directory Service </div>
     </td>
   </tr>
 <tr>
  <th>Return type</th>
  <td>
   <div class="return-type">
     <a>DigitalAddress</a>
   </div>
  </td>
 </tr>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
        <td>
        <code>{
        "entityDID" : "did:dtx:1111111111",
        "entityDigitalAddress" : "abc@dtx",
        "entityRole" : "Issuer",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        }</code>
        </td>
        <td>
        <code>{
        "entityDID" : "did:dtx:1111111111",
        "entityDigitalAddress" : "abc@dtx",
        "entityRole" : "Issuer",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        }</code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>

#### Produces #### {#sctn-gadi-create-da-prod}

  This API call produces the following media types according to the Accept request header;
  the media type will be conveyed by the Content-Type response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-create-da-resp}

<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td>OK Returns <a>DigitalAddress</a> </td>
      </tr>
      <tr>
        <th>201</th>
        <td>Digital Address saved successfully</td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>

<!-- End: Create Digital address -->

<!-- Start: Lookup Digital address -->
### Search Digital Address Using a Criteria ### {#sctn-gadi-lookup-da}

#### Request #### {#sctn-gadi-lookup-da-req}

<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/directorydigital-address/search</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>POST</td>
 </tr>
 <tr>
  <th>Consumes</th>
  <td>
    This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
     * <code>application/json</code>
  </td>
 </tr>
 <tr>
  <th>Request body</th>
  <td>
   <div class="param">body <a>DigitalAddressCriteria</a> (required)</div>
   <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; A criteria based search consisting of one or more attributes Returns matching Digital Address records from the Directory Service. </div>
  </td>
 </tr>
 <tr>
  <th>Return type</th>
   <td>
     <div class="return-type"><a>DigitalAddress</a></div>
   </td>
 </tr>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
      <td>
      <code>{
      "createdBy" : "did:dtx:888888888888",
      "status" : "Active"
      }</code>
      </td>
      <td>
        <code>[ {
        "entityDigitalAddress" : "abc@dtx",
        "entityDID" : "did:dtx:1111111111",
        "entityRole" : "Issuer",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        }, {
        "entityDigitalAddress" : "xyz@dtx",
        "entityDID" : "did:dtx:2222222222",
        "entityRole" : "ServiceProvider",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        } ]</code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>

#### Produces #### {#sctn-gadi-lookup-da-prod}
  This API call produces the following media types according to the <span class="header">Accept</span> request header;
  the media type will be conveyed by the <span class="header">Content-Type</span> response header.

  * <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-lookup-da-resp}

<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td><span>OK</span> Returns <a>DigitalAddress</a> </td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>


<!-- End: Lookup Digital Address -->



<!-- Start: Get Digital address -->
### Get Digital Address ### {#sctn-gadi-get-da}

#### Request #### {#sctn-gadi-get-da-req}

<table class="complex data longlastcol">
 <tr>
  <th>Path</th>
  <td>/api/directory/digital-address/{digitalAddress}</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>GET</td>
 </tr>
 <tr>
  <th>Path Parameters</th>
  <td><div class="param">digitalAddress (required)</div>
    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The Digital Address </div></td>
 </tr>
 <tr>
  <th>Consumes</th>
  <td>
   This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

    * <code>application/json</code>
  </td>
 </tr>
 <tr>
  <th>Return type</th>
  <td>
    <div class="return-type"><a>DigitalAddress</a></div>
  </td>
 </tr>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
  <tr>
  <td>
   <code>
      curl -X GET  <host>/api/directory/digital-address/abc@dtx
   </code>
  </td>
  <td>
    <code>{
    "entityDigitalAddress" : "abc@dtx",
    "entityDID" : "did:dtx:1111111111",
    "entityRole" : "Issuer",
    "createdBy" : "did:dtx:888888888888",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "status" : "Active"
    }</code>
    </td>
  </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-gadi-get-da-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-get-da-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Digital Address  Not Found</td>
    </tr>
  </tbody>
</table>
<!-- End: Get Digital address -->


<!-- Start: Get All DAPs  -->

### Get All DAPs ### {#sctn-gadi-get-all-daps}

#### Request #### {#sctn-gadi-get-all-daps-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>GET</td>
    </tr>

    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

         * <code>application/json</code>
      </td>
    </tr>

    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
  <tr>
  <td>
  <code>
      curl -X GET  <host>/api/directory/daps
  </code>
  </td>
  <td>
  <code>[ {
  "entityDigitalAddress" : "A123@dtx",
  "entityDID" : "did:dtx:AAAAAAAAAAA",
  "entityRole" : "DAP",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  }, {
  "entityDigitalAddress" : "B123@dtx",
  "entityDID" : "did:dtx:BBBBBBBBBBB",
  "entityRole" : "DAP",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  } ]</code>
    </td>
  </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-gadi-get-all-daps-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

 * <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-get-all-daps-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Resource Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Get All DAPs -->

<!-- Start: Get Issuers for a DAP -->
### Get Issuers for a DAP ### {#sctn-gadi-get-issuers-for-dap}

#### Request #### {#sctn-gadi-get-issuers-for-dap-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/issuers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>GET</td>
    </tr>
    <tr>
    <th>Path Parameters</th>
    <td><div class="param">dapId (required)</div>

    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The identifier for the DAP </div></td>
    </tr>

    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
        <ul>
          <li><code>application/json</code></li>
        </ul>
      </td>
    </tr>

    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
  <tr>
  <td>
  <code>
      curl -X GET  <host>/api/directory/daps/did:dtx:AAAAAAAAAA/issuers
      </code>
  </td>
  <td>
  <code>[ {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:1111111111",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  },
  {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:3333333333",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  } ]</code>
    </td>
  </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-gadi-get-issuers-for-dap-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-get-issuers-for-dap-resp}

<table class="complex data longlastcol">
<table>
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Resource  Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Get Issuers for a DAP-->

<!-- Start: Get Service Providers for a DAP -->
### Get Service Providers for a DAP ### {#sctn-gadi-get-sps-for-dap}

#### Request #### {#sctn-gadi-get-sps-for-dap-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/service_providers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>GET</td>
    </tr>
    <tr>
    <th>Path Parameters</th>
    <td><div class="param">dapId (required)</div>

    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The identifier for the DAP </div></td>
    </tr>

    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
        <ul>
          <li><code>application/json</code></li>
        </ul>
      </td>
    </tr>

    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
  <tr>
  <td>
  <code>
      curl -X GET  <host>/api/directory/daps/did:dtx:AAAAAAAAAA/service_providers
</code>
  </td>
  <td>
  <code>[ {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:2222222222",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  },
  {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:4444444444",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  } ]</code>
    </td>
  </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-gadi-get-sps-for-dap-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-get-sps-for-dap-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Resource  Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Get Service Providers for a DAP -->


<!-- Start: Create a DAP -->
### Create a DAP ### {#sctn-gadi-create-dap}

#### Request #### {#sctn-gadi-create-dap-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
        <ul>
          <li><code>application/json</code></li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>Request body</th>
      <td>
        <div class="param">body <a>DigitalAddress</a> (required)</div>
        <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Payload contains the DID and DigitalAddres for a DAP and persisted to the GADI Directory Service </div>
      </td>
    </tr>
    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
    <tr>
      <td>
      <code>{
      "entityDID" : "did:dtx:AAAAAAAAAA",
      "entityDigitalAddress" : "mmnnmm@dtx",
      "entityRole" : "DAP",
      "createdBy" : "did:dtx:888888888888",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
      <td>
      <code>{
      "entityDID" : "did:dtx:AAAAAAAAAA",
      "entityDigitalAddress" : "mmnnmm@dtx",
      "entityRole" : "DAP",
      "createdBy" : "did:dtx:888888888888",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
    </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-gadi-create-dap-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-create-dap-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>200</th>
      <td><span>OK</span> Returns <a>DigitalAddress</a> </td>
    </tr>
    <tr>
      <th>201</th>
      <td>DAP saved successfully</td>
    </tr>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Ressource Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Create A DAP -->


<!-- Start: Create an Issuer -->
### Create an Issuer ### {#sctn-gadi-create-issuer}

#### Request #### {#sctn-gadi-create-issuer-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/issuers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
        <ul>
          <li><code>application/json</code></li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>Request body</th>
      <td>
        <div class="param">body <a>DigitalAddress</a> (required)</div>
        <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Payload contains the DID and DigitalAddres for an Issuer and persisted to the GADI Directory Service </div>
      </td>
    </tr>
    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
    <tr>
      <td>
      <code>{
      "entityDID" : "did:dtx:11111111",
      "entityDigitalAddress" : "abc@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
      <td>
      <code>{
      "entityDID" : "did:dtx:11111111",
      "entityDigitalAddress" : "abc@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
    </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-gadi-create-issuer-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-create-issuer-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>200</th>
      <td><span>OK</span> Returns <a>DigitalAddress</a> </td>
    </tr>
    <tr>
      <th>201</th>
      <td>Issuer saved successfully</td>
    </tr>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Ressource Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Create an Issuer -->


<!-- Start: Create a Service Provider -->
### Create a Service Provider ### {#sctn-gadi-create-sp}

#### Request #### {#sctn-gadi-create-sp-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/service_providers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
        <ul>
          <li><code>application/json</code></li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>Request body</th>
      <td>
        <div class="param">body <a>DigitalAddress</a> (required)</div>
        <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Payload contains the DID and DigitalAddres for a Service Provider and persisted to the GADI Directory Service </div>
      </td>
    </tr>
    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
    <tr>
      <td>
      <code>{
      "entityDID" : "did:dtx:2222222222",
      "entityDigitalAddress" : "xyz@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
      <td>
      <code>{
      "entityDID" : "did:dtx:2222222222",
      "entityDigitalAddress" : "xyz@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
    </tr>
  </tbody>
</table>
</aside>


#### Produces #### {#sctn-gadi-create-sp-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-gadi-create-sp-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>200</th>
      <td><span>OK</span> Returns <a>DigitalAddress</a> </td>
    </tr>
    <tr>
      <th>201</th>
      <td>Service Provider saved successfully</td>
    </tr>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Ressource Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Create an Service Provider -->



# DAP Agency API # {#sctn-apis}

## Directory Resource ## {#sctn-directory-resource}

  <!-- Start: Create Digital address -->
### Create Digital Address ### {#sctn-create-da}

#### Request #### {#sctn-create-da-req}

<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/directory/digital-address</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>POST</td>
 </tr>
 <tr>
  <th>Consumes</th>
    <td>
      This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

      * <code>application/json</code>

    </td>
   </tr>
   <tr>
    <th>Request body</th>
     <td>
      <div class="param">body <a>DigitalAddress</a> (required)</div>
      <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Payload contains the primary and secondary hashes created from the core attributes provided by the user and persisted to the DAP Directory Service </div>
     </td>
   </tr>
 <tr>
  <th>Return type</th>
  <td>
   <div class="return-type">
     <a>DigitalAddress</a>
   </div>
  </td>
 </tr>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
        <td>
        <code>{
        "entityDID" : "did:dtx:1111111111",
        "entityDigitalAddress" : "abc@dtx",
        "entityRole" : "Issuer",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        }</code>
        </td>
        <td>
        <code>{
        "entityDID" : "did:dtx:1111111111",
        "entityDigitalAddress" : "abc@dtx",
        "entityRole" : "Issuer",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        }</code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>

#### Produces #### {#sctn-create-da-prod}

  This API call produces the following media types according to the Accept request header;
  the media type will be conveyed by the Content-Type response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-create-da-resp}

<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td>OK Returns <a>DigitalAddress</a> </td>
      </tr>
      <tr>
        <th>201</th>
        <td>Digital Address saved successfully</td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>

<!-- End: Create Digital address -->

<!-- Start: Lookup Digital address -->
### Search Digital Address Using a Criteria ### {#sctn-lookup-da}

#### Request #### {#sctn-lookup-da-req}

<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/directory/digital-address/search</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>POST</td>
 </tr>
 <tr>
  <th>Consumes</th>
  <td>
    This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
     * <code>application/json</code>
  </td>
 </tr>
 <tr>
  <th>Request body</th>
  <td>
   <div class="param">body <a>DigitalAddressCriteria</a> (required)</div>
   <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; A criteria based search consisting of one or more attributes Returns matching Digital Address records from the Directory Service. </div>
  </td>
 </tr>
 <tr>
  <th>Return type</th>
   <td>
     <div class="return-type"><a>DigitalAddress</a></div>
   </td>
 </tr>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
      <td>
      <code>{
      "createdBy" : "did:dtx:888888888888",
      "status" : "Active"
      }</code>
      </td>
      <td>
        <code>[ {
        "entityDigitalAddress" : "abc@dtx",
        "entityDID" : "did:dtx:1111111111",
        "entityRole" : "Issuer",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        }, {
        "entityDigitalAddress" : "xyz@dtx",
        "entityDID" : "did:dtx:2222222222",
        "entityRole" : "ServiceProvider",
        "createdBy" : "did:dtx:888888888888",
        "createdDate" : "2000-01-23T04:56:07.000+00:00",
        "status" : "Active"
        } ]</code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>

#### Produces #### {#sctn-lookup-da-prod}
  This API call produces the following media types according to the <span class="header">Accept</span> request header;
  the media type will be conveyed by the <span class="header">Content-Type</span> response header.

  * <pre><code>*/*</code></pre>

#### Responses #### {#sctn-lookup-da-resp}

<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td><span>OK</span> Returns <a>DigitalAddress</a> </td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>


<!-- End: Lookup Digital Address -->



<!-- Start: Get Digital address -->
### Get Digital Address ### {#sctn-get-da}

#### Request #### {#sctn-get-da-req}

<table class="complex data longlastcol">
 <tr>
  <th>Path</th>
  <td>/api/directory/digital-address/{digitalAddress}</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>GET</td>
 </tr>
 <tr>
  <th>Path Parameters</th>
  <td><div class="param">digitalAddress (required)</div>
    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The Digital Address </div></td>
 </tr>

 <tr>
  <th>Return type</th>
  <td>
    <div class="return-type"><a>DigitalAddress</a></div>
  </td>
 </tr>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
  <tr>
  <td>
   <code>
      curl -X GET  <host>/api/directory/digital-address/abc@dtx
   </code>
  </td>
  <td>
    <code>{
    "entityDigitalAddress" : "abc@dtx",
    "entityDID" : "did:dtx:1111111111",
    "entityRole" : "Issuer",
    "createdBy" : "did:dtx:888888888888",
    "createdDate" : "2000-01-23T04:56:07.000+00:00",
    "status" : "Active"
    }</code>
    </td>
  </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-get-da-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-get-da-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Digital Address  Not Found</td>
    </tr>
  </tbody>
</table>
<!-- End: Get Digital address -->



<!-- Start: Get Issuers for a DAP -->
### Get Issuers for a DAP Agency ### {#sctn-get-issuers-for-dap}

#### Request #### {#sctn-get-issuers-for-dap-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/issuers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>GET</td>
    </tr>
    <tr>
    <th>Path Parameters</th>
    <td><div class="param">dapId (required)</div>

    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The identifier for the DAP </div></td>
    </tr>


    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
  <tr>
  <td>
  <code>
      curl -X GET  <host>/api/directory/daps/did:dtx:AAAAAAAAAA/issuers
      </code>
  </td>
  <td>
  <code>[ {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:1111111111",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  },
  {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:3333333333",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  } ]</code>
    </td>
  </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-get-issuers-for-dap-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-get-issuers-for-dap-resp}

<table class="complex data longlastcol">
<table>
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Resource  Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Get Issuers for a DAP-->

<!-- Start: Get Service Providers for a DAP -->
### Get Service Providers for a DAP Agency ### {#sctn-get-sps-for-dap}

#### Request #### {#sctn-get-sps-for-dap-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/service_providers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>GET</td>
    </tr>
    <tr>
    <th>Path Parameters</th>
    <td><div class="param">dapId (required)</div>

    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The identifier for the DAP </div></td>
    </tr>


    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
  <tr>
  <td>
  <code>
      curl -X GET  <host>/api/directory/daps/did:dtx:AAAAAAAAAA/service_providers
</code>
  </td>
  <td>
  <code>[ {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:2222222222",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  },
  {
  "entityDigitalAddress" : "abc@dtx",
  "entityDID" : "did:dtx:4444444444",
  "entityRole" : "Issuer",
  "createdBy" : "did:dtx:888888888888",
  "createdDate" : "2000-01-23T04:56:07.000+00:00",
  "status" : "Active"
  } ]</code>
    </td>
  </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-get-sps-for-dap-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-get-sps-for-dap-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Resource  Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Get Service Providers for a DAP -->


<!-- Start: Create an Issuer -->
### Create an Issuer ### {#sctn-create-issuer}

#### Request #### {#sctn-create-issuer-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/issuers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
        <ul>
          <li><code>application/json</code></li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>Request body</th>
      <td>
        <div class="param">body <a>DigitalAddress</a> (required)</div>
        <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Payload contains the DID and DigitalAddres for an Issuer and persisted to the DAP Directory Service </div>
      </td>
    </tr>
    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
    <tr>
      <td>
      <code>{
      "entityDID" : "did:dtx:11111111",
      "entityDigitalAddress" : "abc@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
      <td>
      <code>{
      "entityDID" : "did:dtx:11111111",
      "entityDigitalAddress" : "abc@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
    </tr>
  </tbody>
</table>
</aside>

#### Produces #### {#sctn-create-issuer-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-create-issuer-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>200</th>
      <td><span>OK</span> Returns <a>DigitalAddress</a> </td>
    </tr>
    <tr>
      <th>201</th>
      <td>Issuer saved successfully</td>
    </tr>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Ressource Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Create an Issuer -->


<!-- Start: Create a Service Provider -->
### Create a Service Provider ### {#sctn-create-sp}

#### Request #### {#sctn-create-sp-req}

<table class="complex data longlastcol">
  <tbody>
  <tr>
  <th>Path</th>
  <td>/api/directory/daps/{dapId}/service_providers</td>
  </tr>
    <tr>
      <th>Method</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:
        <ul>
          <li><code>application/json</code></li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>Request body</th>
      <td>
        <div class="param">body <a>DigitalAddress</a> (required)</div>
        <div class="param-desc"><span class="param-type">Body Parameter</span> &mdash; Payload contains the DID and DigitalAddres for a Service Provider and persisted to the DAP Directory Service </div>
      </td>
    </tr>
    <tr>
      <th>Return type</th>
      <td>
        <div class="return-type">
          <a>DigitalAddress</a>
        </div>
      </td>
    </tr>
  </tbody>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
<table>
  <thead>
    <th>Request</th>
    <th>Response</th>
  </thead>
  <tbody>
    <tr>
      <td>
      <code>{
      "entityDID" : "did:dtx:2222222222",
      "entityDigitalAddress" : "xyz@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
      <td>
      <code>{
      "entityDID" : "did:dtx:2222222222",
      "entityDigitalAddress" : "xyz@dtx",
      "entityRole" : "Issuer",
      "createdBy" : "did:dtx:AAAAAAAAAA",
      "createdDate" : "2000-01-23T04:56:07.000+00:00",
      "status" : "Active"
      }</code>
      </td>
    </tr>
  </tbody>
</table>
</aside>


#### Produces #### {#sctn-create-sp-prod}
This API call produces the following media types according to the <span class="header">Accept</span> request header;
the media type will be conveyed by the <span class="header">Content-Type</span> response header.

* <pre><code>*/*</code></pre>

#### Responses #### {#sctn-create-sp-resp}

<table class="complex data longlastcol">
  <thead>
    <th>Status</th>
    <th>Description</th>
  </thead>
  <tbody>
    <tr>
      <th>200</th>
      <td><span>OK</span> Returns <a>DigitalAddress</a> </td>
    </tr>
    <tr>
      <th>201</th>
      <td>Service Provider saved successfully</td>
    </tr>
    <tr>
      <th>401</th>
      <td>Unauthorized Access</td>
    </tr>
    <tr>
      <th>403</th>
      <td>Forbidden Access</td>
    </tr>
    <tr>
      <th>404</th>
      <td>Ressource Not Found</td>
    </tr>
  </tbody>
</table>
</div>
<!-- End: Create an Service Provider -->


## Credential Resource ## {#sctn-credential-resource}

### Create Credential Schema ### {#sctn-create-credential-schema}

#### Request #### {#sctn-create-credential-schema-req}

<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/credentials/credential-schema</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>POST</td>
 </tr>
 <tr>
  <th>Consumes</th>
    <td>
      This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

      * <code>application/json</code>

    </td>
   </tr>
   <tr>
    <th>Request body</th>
     <td>
      <div class="param">body <a>CredentialSchema</a> (required)</div>
      <div class="param-desc"><span class="param-type">Save a credential schema with attributes. Verifiable Credentials are issued against a credential schema published by the Issuer.</div>
     </td>
   </tr>
 <tr>
  <th>Return type</th>
  <td>
   <div class="return-type">
     <a>CredentialSchema</a>
   </div>
  </td>
 </tr>
</table>

<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
      <td>
      <code>{
        "credentialSchemaId": "string",
        "name": "string",
        "version": "string",
        "description": "string",
        "published": true,
        "publishedDate": "2021-01-28T00:52:26.450Z",
        "publishingEntityDID": "string",
        "publishingEntityType": "Issuer",
        "revoked": true,
        "revokedDate": "2021-01-28T00:52:26.450Z",
        "revokingEntityDID": "string",
        "revokingEntityRole": "Issuer",
        "createdBy": "string",
        "createdDate": "2021-01-28T00:52:26.450Z"
      }</code>
      </td>
      <td>
        <code>{
        "credentialSchemaId": "string",
        "name": "string",
        "version": "string",
        "description": "string",
        "published": true,
        "publishedDate": "2021-01-28T00:52:26.478Z",
        "publishingEntityDID": "string",
        "publishingEntityType": "Issuer",
        "revoked": true,
        "revokedDate": "2021-01-28T00:52:26.478Z",
        "revokingEntityDID": "string",
        "revokingEntityRole": "Issuer",
        "createdBy": "string",
        "createdDate": "2021-01-28T00:52:26.478Z"
      }   </code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>



#### Produces #### {#sctn-create-credential-schema-prod}
This API call produces the following media types according to the Accept request header;
the media type will be conveyed by the Content-Type response header.

* <pre><code>*/*</code></pre>


#### Responses #### {#sctn-create-credential-schema-resp}
<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td>OK Returns <a>CredentialSchema</a> </td>
      </tr>
      <tr>
        <th>201</th>
        <td>Credential Schema saved successfully</td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>


### Search Credential Schema ### {#sctn-search-credential-schema}

#### Request #### {#sctn-search-credential-schema-req}
<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/credentials/credential-schema/search</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>POST</td>
 </tr>
 <tr>
  <th>Consumes</th>
    <td>
      This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

      * <code>application/json</code>

    </td>
   </tr>
   <tr>
    <th>Request body</th>
     <td>
      <div class="param">body <a>CredentialCriteria</a> (required)</div>
      <div class="param-desc"><span class="param-type">Body Parameter</span>A criteria based search consisting of one or more attributes. Returns matching credential schema records from the DAP Ledger.</td>
   </tr>
 <tr>
  <th>Return type</th>
  <td>
   <div class="return-type">
     <a>CredentialSchema</a>
   </div>
  </td>
 </tr>
</table>


<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
      <td>
      <code>{
        "issuingEntityDID": "string",
        "issuingEntityRole": "Issuer",
        "userDID": "string",
        "verifierDID": "string",
        "credentialSchemaId": "string",
        "credentialId": "string",
        "active": true,
        "createdBy": "string",
        "createdDate": "2021-01-28",
        "fromDate": "2021-01-28",
        "toDate": "2021-01-28"
      }</code>
      </td>
      <td>
        <code>
                [
          {
            "credentialSchemaId": "string",
            "name": "string",
            "version": "string",
            "description": "string",
            "published": true,
            "publishedDate": "2021-01-28T00:56:32.221Z",
            "publishingEntityDID": "string",
            "publishingEntityType": "Issuer",
            "revoked": true,
            "revokedDate": "2021-01-28T00:56:32.221Z",
            "revokingEntityDID": "string",
            "revokingEntityRole": "Issuer",
            "createdBy": "string",
            "createdDate": "2021-01-28T00:56:32.221Z"
          }
        ]
        </code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>



#### Produces #### {#sctn-search-credential-schema-prod}
This API call produces the following media types according to the Accept request header;
the media type will be conveyed by the Content-Type response header.

* <pre><code>*/*</code></pre>


#### Responses #### {#sctn-search-credential-schema-resp}
<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td>OK Returns <a>CredentialSchema</a> </td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>


### Get a Credential Schema ### {#sctn-get-credential-schema}

#### Request #### {#sctn-get-credential-schema-req}
<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/credentials/credential-schema/{credentialSchemaId}</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>GET</td>
 </tr>
 <tr>
  <th>Path Parameters</th>
  <td><div class="param">credentialSchemaId (required)</div>
    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The Id of the Credential Schema</div></td>
 </tr>

 <tr>
  <th>Return type</th>
  <td>
   <div class="return-type">
     <a>CredentialSchema</a>
   </div>
  </td>
 </tr>
</table>


<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
      <td>
      <code>curl -X GET  <host>/api/credentials/credential-schema/aaxddgfhjhgggddd</code>
      </td>
      <td>
        <code>
        {
          "credentialSchemaId": "string",
          "name": "string",
          "version": "string",
          "description": "string",
          "published": true,
          "publishedDate": "2021-01-28T01:02:10.689Z",
          "publishingEntityDID": "string",
          "publishingEntityType": "Issuer",
          "revoked": true,
          "revokedDate": "2021-01-28T01:02:10.689Z",
          "revokingEntityDID": "string",
          "revokingEntityRole": "Issuer",
          "createdBy": "string",
          "createdDate": "2021-01-28T01:02:10.689Z"
        }
        </code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>



#### Produces #### {#sctn-get-credential-schema-prod}
This API call produces the following media types according to the Accept request header;
the media type will be conveyed by the Content-Type response header.

* <pre><code>*/*</code></pre>


#### Responses #### {#sctn-get-credential-schema-resp}
<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td>OK Returns <a>CredentialSchema</a> </td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>


  ### Create Credential Metadata ### {#sctn-create-credential-metadata}

  #### Request #### {#sctn-create-credential-metadata-req}

  <table class="complex data longlastcol">
   <tr>
     <th>Path</th>
     <td>/api/credentials/credential-metadata</td>
   </tr>
   <tr>
    <th>Method</th>
    <td>POST</td>
   </tr>
   <tr>
    <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

        * <code>application/json</code>

      </td>
     </tr>
     <tr>
      <th>Request body</th>
       <td>
        <div class="param">body <a>CredentialMetadata</a> (required)</div>
        <div class="param-desc"><span class="param-type">Save a credential metadata with attributes. Verifiable Credentials are issued against a credential metadata published by the Issuer.</div>
       </td>
     </tr>
   <tr>
    <th>Return type</th>
    <td>
     <div class="return-type">
       <a>CredentialMetadata</a>
     </div>
    </td>
   </tr>
  </table>

  <aside class="example">
  <div class="example-data-content-type">Content-Type: application/json</div>
    <table>
      <thead>
        <th>Request</th>
        <th>Response</th>
      </thead>
      <tbody>
        <tr>
        <td>
        <code>{
            "credentialId": "string",
            "credentialSchemaId": "string",
            "CredentialSchemaVersion": "string",
            "credentialType": "string",
            "issuedToEntityDID": "string",
            "issuedToEntityDA": "string",
            "issuedEntityRole": "Issuer - DAP",
            "active": true,
            "issuedDate": "2021-01-28T01:13:19.550Z",
            "issuingEntityDID": "string",
            "issuingEntityDA": "string",
            "issuingEntityRole": "Issuer",
            "revoked": true,
            "revokedDate": "2021-01-28T01:13:19.550Z",
            "revokingEntityDID": "string",
            "revokingEntityDA": "string",
            "revokingEntityRole": "Issuer",
            "dapDID": "string",
            "dapDA": "string",
            "createdBy": "string",
            "createdDate": "2021-01-28T01:13:19.550Z"
          }</code>
        </td>
        <td>
          <code>{
          "credentialId": "string",
          "credentialSchemaId": "string",
          "CredentialSchemaVersion": "string",
          "credentialType": "string",
          "issuedToEntityDID": "string",
          "issuedToEntityDA": "string",
          "issuedEntityRole": "Issuer - DAP",
          "active": true,
          "issuedDate": "2021-01-28T01:13:19.558Z",
          "issuingEntityDID": "string",
          "issuingEntityDA": "string",
          "issuingEntityRole": "Issuer",
          "revoked": true,
          "revokedDate": "2021-01-28T01:13:19.558Z",
          "revokingEntityDID": "string",
          "revokingEntityDA": "string",
          "revokingEntityRole": "Issuer",
          "dapDID": "string",
          "dapDA": "string",
          "createdBy": "string",
          "createdDate": "2021-01-28T01:13:19.558Z"
        }</code>
          </td>
        </tr>
      </tbody>
    </table>
  </aside>



  #### Produces #### {#sctn-create-credential-metadata-prod}
  This API call produces the following media types according to the Accept request header;
  the media type will be conveyed by the Content-Type response header.

  * <pre><code>*/*</code></pre>


  #### Responses #### {#sctn-create-credential-metadata-resp}
  <table class="complex data longlastcol">
      <thead>
        <th>Status</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <th>200</th>
          <td>OK Returns <a>CredentialMetadata</a> </td>
        </tr>
        <tr>
          <th>201</th>
          <td>Credential Metadata saved successfully</td>
        </tr>
        <tr>
          <th>401</th>
          <td>Unauthorized Access</td>
        </tr>
        <tr>
          <th>403</th>
          <td>Forbidden Access</td>
        </tr>
        <tr>
          <th>404</th>
          <td>Resource Not Found</td>
        </tr>
      </tbody>
    </table>


  ### Search Credential Metadata ### {#sctn-search-credential-metadata}

  #### Request #### {#sctn-search-credential-metadata-req}
  <table class="complex data longlastcol">
   <tr>
     <th>Path</th>
     <td>/api/credentials/credential-metadata/search</td>
   </tr>
   <tr>
    <th>Method</th>
    <td>GET</td>
   </tr>
     <tr>
      <th>Request body</th>
       <td>
        <div class="param">body <a>CredentialCriteria</a> (required)</div>
        <div class="param-desc"><span class="param-type">Body Parameter</span>A criteria based search consisting of one or more attributes. Returns matching credential metadata records from the DAP Ledger.</td>
     </tr>
   <tr>
    <th>Return type</th>
    <td>
     <div class="return-type">
       <a>CredentialMetadata</a>
     </div>
    </td>
   </tr>
  </table>


  <aside class="example">
  <div class="example-data-content-type">Content-Type: application/json</div>
    <table>
      <thead>
        <th>Request</th>
        <th>Response</th>
      </thead>
      <tbody>
        <tr>
        <td>
        <code>{
          "issuingEntityDID": "string",
          "issuingEntityRole": "Issuer",
          "userDID": "string",
          "verifierDID": "string",
          "credentialSchemaId": "string",
          "credentialId": "string",
          "active": true,
          "createdBy": "string",
          "createdDate": "2021-01-28",
          "fromDate": "2021-01-28",
          "toDate": "2021-01-28"
        }</code>
        </td>
        <td>
          <code>[
          {
            "credentialId": "string",
            "credentialSchemaId": "string",
            "CredentialSchemaVersion": "string",
            "credentialType": "string",
            "issuedToEntityDID": "string",
            "issuedToEntityDA": "string",
            "issuedEntityRole": "Issuer - DAP",
            "active": true,
            "issuedDate": "2021-01-28T01:14:06.817Z",
            "issuingEntityDID": "string",
            "issuingEntityDA": "string",
            "issuingEntityRole": "Issuer",
            "revoked": true,
            "revokedDate": "2021-01-28T01:14:06.817Z",
            "revokingEntityDID": "string",
            "revokingEntityDA": "string",
            "revokingEntityRole": "Issuer",
            "dapDID": "string",
            "dapDA": "string",
            "createdBy": "string",
            "createdDate": "2021-01-28T01:14:06.817Z"
          }
        ]
          </code>
          </td>
        </tr>
      </tbody>
    </table>
  </aside>



  #### Produces #### {#sctn-search-credential-metadata-prod}
  This API call produces the following media types according to the Accept request header;
  the media type will be conveyed by the Content-Type response header.

  * <pre><code>*/*</code></pre>


  #### Responses #### {#sctn-search-credential-metadata-resp}
  <table class="complex data longlastcol">
      <thead>
        <th>Status</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <th>200</th>
          <td>OK Returns <a>CredentialMetadata</a> </td>
        </tr>
        <tr>
          <th>401</th>
          <td>Unauthorized Access</td>
        </tr>
        <tr>
          <th>403</th>
          <td>Forbidden Access</td>
        </tr>
        <tr>
          <th>404</th>
          <td>Resource Not Found</td>
        </tr>
      </tbody>
    </table>


  ### Get Credential Metadata ### {#sctn-get-credential-metadata}

  #### Request #### {#sctn-get-credential-metadata-req}
  <table class="complex data longlastcol">
   <tr>
     <th>Path</th>
     <td>/api/credentials/credential-metadata/{credentialMetadataId}</td>
   </tr>
   <tr>
    <th>Method</th>
    <td>GET</td>
   </tr>
   <tr>
    <th>Path Parameters</th>
    <td><div class="param">credentialMetadataId (required)</div>
      <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The Id of the Credential Metadata</div></td>
   </tr>

   <tr>
    <th>Return type</th>
    <td>
     <div class="return-type">
       <a>CredentialMetadata</a>
     </div>
    </td>
   </tr>
  </table>


  <aside class="example">
  <div class="example-data-content-type">Content-Type: application/json</div>
    <table>
      <thead>
        <th>Request</th>
        <th>Response</th>
      </thead>
      <tbody>
        <tr>
        <td>
        <code>curl -X GET  <host>/api/credentials/credential-metadata/aaxddgfhjhgggddd</code>
        </td>
        <td>
          <code>
                      {
              "credentialId": "string",
              "credentialSchemaId": "string",
              "CredentialSchemaVersion": "string",
              "credentialType": "string",
              "issuedToEntityDID": "string",
              "issuedToEntityDA": "string",
              "issuedEntityRole": "Issuer - DAP",
              "active": true,
              "issuedDate": "2021-01-28T01:14:54.546Z",
              "issuingEntityDID": "string",
              "issuingEntityDA": "string",
              "issuingEntityRole": "Issuer",
              "revoked": true,
              "revokedDate": "2021-01-28T01:14:54.546Z",
              "revokingEntityDID": "string",
              "revokingEntityDA": "string",
              "revokingEntityRole": "Issuer",
              "dapDID": "string",
              "dapDA": "string",
              "createdBy": "string",
              "createdDate": "2021-01-28T01:14:54.546Z"
            }
          </code>
          </td>
        </tr>
      </tbody>
    </table>
  </aside>



  #### Produces #### {#sctn-get-credential-metadata-prod}
  This API call produces the following media types according to the Accept request header;
  the media type will be conveyed by the Content-Type response header.

  * <pre><code>*/*</code></pre>


  #### Responses #### {#sctn-get-credential-metadata-resp}
  <table class="complex data longlastcol">
      <thead>
        <th>Status</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <th>200</th>
          <td>OK Returns <a>CredentialMetadata</a> </td>
        </tr>
        <tr>
          <th>401</th>
          <td>Unauthorized Access</td>
        </tr>
        <tr>
          <th>403</th>
          <td>Forbidden Access</td>
        </tr>
        <tr>
          <th>404</th>
          <td>Resource Not Found</td>
        </tr>
      </tbody>
    </table>




### Revoke Credential Metadata ### {#sctn-revoke-credential-metadata}

#### Request #### {#sctn-revoke-credential-metadata-req}
<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/credentials/credential-metadata/{credentialMetadataId}/revoke</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>GET</td>
 </tr>
 <tr>
  <th>Path Parameters</th>
  <td><div class="param">credentialMetadataId (required)</div>
    <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The Id of the Credential Metadata</div></td>
 </tr>


 <tr>
  <th>Return type</th>
  <td>
   <div class="return-type">
     <a>CredentialMetadata</a>
   </div>
  </td>
 </tr>
</table>



<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
      <td>
      <code>curl -X GET  <host>/api/credentials/credential-metadata/aaxddgfhjhgggddd/revoke</code></code>
      </td>
      <td>
        <code>
        {
          "credentialId": "string",
          "credentialSchemaId": "string",
          "CredentialSchemaVersion": "string",
          "credentialType": "string",
          "issuedToEntityDID": "string",
          "issuedToEntityDA": "string",
          "issuedEntityRole": "Issuer - DAP",
          "active": true,
          "issuedDate": "2021-01-28T01:16:49.279Z",
          "issuingEntityDID": "string",
          "issuingEntityDA": "string",
          "issuingEntityRole": "Issuer",
          "revoked": true,
          "revokedDate": "2021-01-28T01:16:49.279Z",
          "revokingEntityDID": "string",
          "revokingEntityDA": "string",
          "revokingEntityRole": "Issuer",
          "dapDID": "string",
          "dapDA": "string",
          "createdBy": "string",
          "createdDate": "2021-01-28T01:16:49.279Z"
        }
        </code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>



#### Produces #### {#sctn-revoke-credential-metadata-prod}
This API call produces the following media types according to the Accept request header;
the media type will be conveyed by the Content-Type response header.

* <pre><code>*/*</code></pre>


#### Responses #### {#sctn-revoke-credential-metadata-resp}

<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td>OK Returns <a>CredentialMetadata</a> </td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>


## User Resource ## {#sctn-user-resource}

### Initialize Authenticator ### {#sctn-fido-initialize}

#### Request #### {#sctn-fido-initialize-req}
<table class="complex data longlastcol">
 <tr>
   <th>Path</th>
   <td>/api/user/fido/init-authenticator</td>
 </tr>
 <tr>
  <th>Method</th>
  <td>POST</td>
 </tr>
 <tr>
  <th>Consumes</th>
    <td>
      This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

      * <code>application/json</code>

    </td>
   </tr>

   <tr>
    <th>Request body</th>
     <td>
      <div class="param">body <a>FidoCommandRequest</a> (required)</div>
      <div class="param-desc"><span class="param-type">Body Parameter</span> - FIDO request parameters</td>
   </tr>
 <tr>
  <th>Return type</th>
  <td>
   <div class="return-type">
     <a>FidoCommandResponse</a>
   </div>
  </td>
 </tr>
</table>



<aside class="example">
<div class="example-data-content-type">Content-Type: application/json</div>
  <table>
    <thead>
      <th>Request</th>
      <th>Response</th>
    </thead>
    <tbody>
      <tr>
      <td>
      <code>
            {
        "appId": "string",
        "deviceId": "string",
        "loginId": "string",
        "packageName": "string"
      }
      </code>
      </td>
      <td>
        <code>
              {
        "deviceId": "string",
        "expireTime": "string",
        "isRegistered": true,
        "loginId": "string",
        "opURL": "string",
        "protocol": "string",
        "resultCode": "string",
        "resultMsg": "string",
        "siteId": "string",
        "svcId": "string",
        "svcTrId": "string",
        "trId": "string",
        "trStatus": "string",
        "trStatusMsg": "string"
      }
        </code>
        </td>
      </tr>
    </tbody>
  </table>
</aside>



#### Produces #### {#sctn-fido-initialize-prod}
This API call produces the following media types according to the Accept request header;
the media type will be conveyed by the Content-Type response header.

* <pre><code>*/*</code></pre>


#### Responses #### {#sctn-fido-initialize-resp}

<table class="complex data longlastcol">
    <thead>
      <th>Status</th>
      <th>Description</th>
    </thead>
    <tbody>
      <tr>
        <th>200</th>
        <td>OK Returns <a>FidoCommandResponse</a> </td>
      </tr>
      <tr>
        <th>401</th>
        <td>Unauthorized Access</td>
      </tr>
      <tr>
        <th>403</th>
        <td>Forbidden Access</td>
      </tr>
      <tr>
        <th>404</th>
        <td>Resource Not Found</td>
      </tr>
    </tbody>
  </table>

  ### Register Account ### {#sctn-fido-register}

  #### Request #### {#sctn-fido-register-req}
  <table class="complex data longlastcol">
   <tr>
     <th>Path</th>
     <td>/api/user/fido/register</td>
   </tr>
   <tr>
    <th>Method</th>
    <td>POST</td>
   </tr>
   <tr>
    <th>Consumes</th>
      <td>
        This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

        * <code>application/json</code>

      </td>
     </tr>

     <tr>
      <th>Request body</th>
       <td>
        <div class="param">body <a>FidoCommandRequest</a> (required)</div>
        <div class="param-desc"><span class="param-type">Body Parameter</span> - FIDO request parameters</td>
     </tr>
   <tr>
    <th>Return type</th>
    <td>
     <div class="return-type">
       <a>FidoCommandResponse</a>
     </div>
    </td>
   </tr>
  </table>



  <aside class="example">
  <div class="example-data-content-type">Content-Type: application/json</div>
    <table>
      <thead>
        <th>Request</th>
        <th>Response</th>
      </thead>
      <tbody>
        <tr>
        <td>
        <code>
              {
        "appId": "string",
        "deviceId": "string",
        "loginId": "string",
        "packageName": "string"
        }
        </code>
        </td>
        <td>
          <code>{
          "deviceId": "string",
          "expireTime": "string",
          "isRegistered": true,
          "loginId": "string",
          "opURL": "string",
          "protocol": "string",
          "resultCode": "string",
          "resultMsg": "string",
          "siteId": "string",
          "svcId": "string",
          "svcTrId": "string",
          "trId": "string",
          "trStatus": "string",
          "trStatusMsg": "string"
        }
          </code>
          </td>
        </tr>
      </tbody>
    </table>
  </aside>



  #### Produces #### {#sctn-fido-register-prod}
  This API call produces the following media types according to the Accept request header;
  the media type will be conveyed by the Content-Type response header.

  * <pre><code>*/*</code></pre>


  #### Responses #### {#sctn-fido-register-resp}

  <table class="complex data longlastcol">
      <thead>
        <th>Status</th>
        <th>Description</th>
      </thead>
      <tbody>
        <tr>
          <th>200</th>
          <td>OK Returns <a>FidoCommandResponse</a> </td>
        </tr>
        <tr>
          <th>401</th>
          <td>Unauthorized Access</td>
        </tr>
        <tr>
          <th>403</th>
          <td>Forbidden Access</td>
        </tr>
        <tr>
          <th>404</th>
          <td>Resource Not Found</td>
        </tr>
      </tbody>
    </table>


    ### DeRegister Account ### {#sctn-fido-deregister}

    #### Request #### {#sctn-fido-deregister-req}
    <table class="complex data longlastcol">
     <tr>
       <th>Path</th>
       <td>/api/user/fido/deregister</td>
     </tr>
     <tr>
      <th>Method</th>
      <td>POST</td>
     </tr>
     <tr>
      <th>Consumes</th>
        <td>
          This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

          * <code>application/json</code>

        </td>
       </tr>

       <tr>
        <th>Request body</th>
         <td>
          <div class="param">body <a>FidoCommandRequest</a> (required)</div>
          <div class="param-desc"><span class="param-type">Body Parameter</span> - FIDO request parameters</td>
       </tr>
     <tr>
      <th>Return type</th>
      <td>
       <div class="return-type">
         <a>FidoCommandResponse</a>
       </div>
      </td>
     </tr>
    </table>



    <aside class="example">
    <div class="example-data-content-type">Content-Type: application/json</div>
      <table>
        <thead>
          <th>Request</th>
          <th>Response</th>
        </thead>
        <tbody>
          <tr>
          <td>
          <code>
                {
          "appId": "string",
          "deviceId": "string",
          "loginId": "string",
          "packageName": "string"
          }
          </code>
          </td>
          <td>
            <code>{
            "deviceId": "string",
            "expireTime": "string",
            "isDeRegistered": true,
            "loginId": "string",
            "opURL": "string",
            "protocol": "string",
            "resultCode": "string",
            "resultMsg": "string",
            "siteId": "string",
            "svcId": "string",
            "svcTrId": "string",
            "trId": "string",
            "trStatus": "string",
            "trStatusMsg": "string"
          }
            </code>
            </td>
          </tr>
        </tbody>
      </table>
    </aside>



    #### Produces #### {#sctn-fido-deregister-prod}
    This API call produces the following media types according to the Accept request header;
    the media type will be conveyed by the Content-Type response header.

    * <pre><code>*/*</code></pre>


    #### Responses #### {#sctn-fido-deregister-resp}

    <table class="complex data longlastcol">
        <thead>
          <th>Status</th>
          <th>Description</th>
        </thead>
        <tbody>
          <tr>
            <th>200</th>
            <td>OK Returns <a>FidoCommandResponse</a> </td>
          </tr>
          <tr>
            <th>401</th>
            <td>Unauthorized Access</td>
          </tr>
          <tr>
            <th>403</th>
            <td>Forbidden Access</td>
          </tr>
          <tr>
            <th>404</th>
            <td>Resource Not Found</td>
          </tr>
        </tbody>
      </table>


      ### Authenticate Account ### {#sctn-fido-authenticate}

      #### Request #### {#sctn-fido-authenticate-req}
      <table class="complex data longlastcol">
       <tr>
         <th>Path</th>
         <td>/api/user/fido/authenticate</td>
       </tr>
       <tr>
        <th>Method</th>
        <td>POST</td>
       </tr>
       <tr>
        <th>Consumes</th>
          <td>
            This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

            * <code>application/json</code>

          </td>
         </tr>

         <tr>
          <th>Request body</th>
           <td>
            <div class="param">body <a>FidoCommandRequest</a> (required)</div>
            <div class="param-desc"><span class="param-type">Body Parameter</span> - FIDO request parameters</td>
         </tr>
       <tr>
        <th>Return type</th>
        <td>
         <div class="return-type">
           <a>FidoCommandResponse</a>
         </div>
        </td>
       </tr>
      </table>



      <aside class="example">
      <div class="example-data-content-type">Content-Type: application/json</div>
        <table>
          <thead>
            <th>Request</th>
            <th>Response</th>
          </thead>
          <tbody>
            <tr>
            <td>
            <code>
                  {
            "appId": "string",
            "deviceId": "string",
            "loginId": "string",
            "packageName": "string"
            }
            </code>
            </td>
            <td>
              <code>{
              "deviceId": "string",
              "expireTime": "string",
              "isAuthenticateed": true,
              "loginId": "string",
              "opURL": "string",
              "protocol": "string",
              "resultCode": "string",
              "resultMsg": "string",
              "siteId": "string",
              "svcId": "string",
              "svcTrId": "string",
              "trId": "string",
              "trStatus": "string",
              "trStatusMsg": "string"
            }
              </code>
              </td>
            </tr>
          </tbody>
        </table>
      </aside>



      #### Produces #### {#sctn-fido-authenticate-prod}
      This API call produces the following media types according to the Accept request header;
      the media type will be conveyed by the Content-Type response header.

      * <pre><code>*/*</code></pre>


      #### Responses #### {#sctn-fido-authenticate-resp}

      <table class="complex data longlastcol">
          <thead>
            <th>Status</th>
            <th>Description</th>
          </thead>
          <tbody>
            <tr>
              <th>200</th>
              <td>OK Returns <a>FidoCommandResponse</a> </td>
            </tr>
            <tr>
              <th>401</th>
              <td>Unauthorized Access</td>
            </tr>
            <tr>
              <th>403</th>
              <td>Forbidden Access</td>
            </tr>
            <tr>
              <th>404</th>
              <td>Resource Not Found</td>
            </tr>
          </tbody>
        </table>

        ### Registration Status ### {#sctn-fido-registered-status}

        #### Request #### {#sctn-fido-registered-status-req}
        <table class="complex data longlastcol">
         <tr>
           <th>Path</th>
           <td>/api/user/fido/registered-status</td>
         </tr>
         <tr>
          <th>Method</th>
          <td>POST</td>
         </tr>
         <tr>
          <th>Consumes</th>
            <td>
              This API call consumes the following media types via the <span class="header">Content-Type</span> request header:

              * <code>application/json</code>

            </td>
           </tr>

           <tr>
            <th>Request body</th>
             <td>
              <div class="param">body <a>FidoCommandRequest</a> (required)</div>
              <div class="param-desc"><span class="param-type">Body Parameter</span> - FIDO request parameters</td>
           </tr>
         <tr>
          <th>Return type</th>
          <td>
           <div class="return-type">
             <a>FidoCommandResponse</a>
           </div>
          </td>
         </tr>
        </table>



        <aside class="example">
        <div class="example-data-content-type">Content-Type: application/json</div>
          <table>
            <thead>
              <th>Request</th>
              <th>Response</th>
            </thead>
            <tbody>
              <tr>
              <td>
              <code>
                    {
              "appId": "string",
              "deviceId": "string",
              "loginId": "string",
              "packageName": "string"
              }
              </code>
              </td>
              <td>
                <code>{
                "deviceId": "string",
                "expireTime": "string",
                "isAuthenticateed": true,
                "loginId": "string",
                "opURL": "string",
                "protocol": "string",
                "resultCode": "string",
                "resultMsg": "string",
                "siteId": "string",
                "svcId": "string",
                "svcTrId": "string",
                "trId": "string",
                "trStatus": "string",
                "trStatusMsg": "string"
              }
                </code>
                </td>
              </tr>
            </tbody>
          </table>
        </aside>



        #### Produces #### {#sctn-fido-registered-status-prod}
        This API call produces the following media types according to the Accept request header;
        the media type will be conveyed by the Content-Type response header.

        * <pre><code>*/*</code></pre>


        #### Responses #### {#sctn-fido-registered-status-resp}

        <table class="complex data longlastcol">
            <thead>
              <th>Status</th>
              <th>Description</th>
            </thead>
            <tbody>
              <tr>
                <th>200</th>
                <td>OK Returns <a>FidoCommandResponse</a> </td>
              </tr>
              <tr>
                <th>401</th>
                <td>Unauthorized Access</td>
              </tr>
              <tr>
                <th>403</th>
                <td>Forbidden Access</td>
              </tr>
              <tr>
                <th>404</th>
                <td>Resource Not Found</td>
              </tr>
            </tbody>
          </table>

          ### Get Transaction Result ### {#sctn-get-transaction-result}

          #### Request #### {#sctn-get-transaction-result-req}
          <table class="complex data longlastcol">
           <tr>
             <th>Path</th>
             <td>/api/user/fido/transaction-result/{svcTrId}</td>
           </tr>
           <tr>
            <th>Method</th>
            <td>GET</td>
           </tr>
           <tr>
            <th>Path Parameters</th>
            <td><div class="param">svcTrId (required)</div>
              <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The Id of the Transaction</div></td>
           </tr>

           <tr>
            <th>Return type</th>
            <td>
             <div class="return-type">
               <a>FidoCommandResponse</a>
             </div>
            </td>
           </tr>
          </table>


          <aside class="example">
          <div class="example-data-content-type">Content-Type: application/json</div>
            <table>
              <thead>
                <th>Request</th>
                <th>Response</th>
              </thead>
              <tbody>
                <tr>
                <td>
                <code>curl -X GET  <host>/api/user/fido/transaction-result/aaxddgfhjhgggddd</code>
                </td>
                <td>
                  <code>
                              {
                      "credentialId": "string",
                      "credentialSchemaId": "string",
                      "CredentialSchemaVersion": "string",
                      "credentialType": "string",
                      "issuedToEntityDID": "string",
                      "issuedToEntityDA": "string",
                      "issuedEntityRole": "Issuer - DAP",
                      "active": true,
                      "issuedDate": "2021-01-28T01:14:54.546Z",
                      "issuingEntityDID": "string",
                      "issuingEntityDA": "string",
                      "issuingEntityRole": "Issuer",
                      "revoked": true,
                      "revokedDate": "2021-01-28T01:14:54.546Z",
                      "revokingEntityDID": "string",
                      "revokingEntityDA": "string",
                      "revokingEntityRole": "Issuer",
                      "dapDID": "string",
                      "dapDA": "string",
                      "createdBy": "string",
                      "createdDate": "2021-01-28T01:14:54.546Z"
                    }
                    </code>
                  </td>
                </tr>
              </tbody>
            </table>
          </aside>



          #### Produces #### {#sctn-get-transaction-result-prod}
          This API call produces the following media types according to the Accept request header;
          the media type will be conveyed by the Content-Type response header.

          * <pre><code>*/*</code></pre>


          #### Responses #### {#sctn-get-transaction-result-resp}
          <table class="complex data longlastcol">
              <thead>
                <th>Status</th>
                <th>Description</th>
              </thead>
              <tbody>
                <tr>
                  <th>200</th>
                  <td>OK Returns <a>FidoCommandResponse</a> </td>
                </tr>
                <tr>
                  <th>401</th>
                  <td>Unauthorized Access</td>
                </tr>
                <tr>
                  <th>403</th>
                  <td>Forbidden Access</td>
                </tr>
                <tr>
                  <th>404</th>
                  <td>Resource Not Found</td>
                </tr>
              </tbody>
            </table>

            ### Get Transaction Status ### {#sctn-get-transaction-status}

            #### Request #### {#sctn-get-transaction-status-req}
            <table class="complex data longlastcol">
             <tr>
               <th>Path</th>
               <td>/api/user/fido/transaction-status/{svcTrId}</td>
             </tr>
             <tr>
              <th>Method</th>
              <td>GET</td>
             </tr>
             <tr>
              <th>Path Parameters</th>
              <td><div class="param">svcTrId (required)</div>
                <div class="param-desc"><span class="param-type">Path Parameter</span> &mdash; The Id of the Transaction</div></td>
             </tr>

             <tr>
              <th>Return type</th>
              <td>
               <div class="return-type">
                 <a>FidoCommandResponse</a>
               </div>
              </td>
             </tr>
            </table>


            <aside class="example">
            <div class="example-data-content-type">Content-Type: application/json</div>
              <table>
                <thead>
                  <th>Request</th>
                  <th>Response</th>
                </thead>
                <tbody>
                  <tr>
                  <td>
                  <code>curl -X GET  <host>/api/user/fido/transaction-status/aaxddgfhjhgggddd</code>
                  </td>
                  <td>
                    <code>
                                {
                        "credentialId": "string",
                        "credentialSchemaId": "string",
                        "CredentialSchemaVersion": "string",
                        "credentialType": "string",
                        "issuedToEntityDID": "string",
                        "issuedToEntityDA": "string",
                        "issuedEntityRole": "Issuer - DAP",
                        "active": true,
                        "issuedDate": "2021-01-28T01:14:54.546Z",
                        "issuingEntityDID": "string",
                        "issuingEntityDA": "string",
                        "issuingEntityRole": "Issuer",
                        "revoked": true,
                        "revokedDate": "2021-01-28T01:14:54.546Z",
                        "revokingEntityDID": "string",
                        "revokingEntityDA": "string",
                        "revokingEntityRole": "Issuer",
                        "dapDID": "string",
                        "dapDA": "string",
                        "createdBy": "string",
                        "createdDate": "2021-01-28T01:14:54.546Z"
                      }
                      </code>
                    </td>
                  </tr>
                </tbody>
              </table>
            </aside>



            #### Produces #### {#sctn-get-transaction-status-prod}
            This API call produces the following media types according to the Accept request header;
            the media type will be conveyed by the Content-Type response header.

            * <pre><code>*/*</code></pre>


            #### Responses #### {#sctn-get-transaction-status-resp}
            <table class="complex data longlastcol">
                <thead>
                  <th>Status</th>
                  <th>Description</th>
                </thead>
                <tbody>
                  <tr>
                    <th>200</th>
                    <td>OK Returns <a>FidoCommandResponse</a> </td>
                  </tr>
                  <tr>
                    <th>401</th>
                    <td>Unauthorized Access</td>
                  </tr>
                  <tr>
                    <th>403</th>
                    <td>Forbidden Access</td>
                  </tr>
                  <tr>
                    <th>404</th>
                    <td>Resource Not Found</td>
                  </tr>
                </tbody>
              </table>



# Certification # {#sctn-certification}



# GADI Requirements # {#sctn-reqs}

Issue: We will likely remove this section later.  But for now let's
   keep it as a reference for the requirements th specs needs to meet.

<figure id="table-security-privacy-goals" class="table">
    <table class="complex data">
        <tr>
            <th>No</th>
            <th>Goal</th>
            <th>Rationale</th>
        </tr>
        <tr>
            <td>1</td>
            <td>
		The GADI Framework respects national laws and allows the <a>DAP Agency</a>s to operate according to their local regulations.
 		This includes compliance to CCPA and GDPR.
	    </td>
            <td>
	        Local law is the basis for any business.
            </td>
        </tr>
        <tr>
            <td>2</td>
            <td>
	      Users must have control on user credentials, i.e. no credentials are created or shared without the user's consent.
	      This means, <a>DAP Agency</a> asks for user consent and strongly authenticates the user.
	    </td>
            <td>
	      Data Privacy regulation & expectation
            </td>
        </tr>
        <tr>
            <td>3</td>
            <td>
	      Users have the ability to select a set of attributes verified by a specific issuer to be included in a specific credential.
	    </td>
            <td>
	      Data Privacy regulation & expectation.  If the user only wants to share a subset of the data that should be ok to the issuer.
            </td>
        </tr>
        <tr>
            <td>4</td>
            <td>
	      GADI doesn't make user tracking or collusion between Service Providers easier.
	      If two <a>SP</a>s both received a credential that John Doe was born on date X in Y,
	      then the two <a>SP</a>s could learn it is the very likely same user. But this has nothing to do with GADI.

	      As a consequence, the <a>Digital Address</a> / <a>Trust Anchor</a> are NOT part of the credential.
	      Credentials are in the W3C VC format [[!vc-data-model]] and are tied to a <a>DID</a>.
	    </td>
            <td>
	      GADI doesn't share correlation handles with <a>SP</a>s for privacy reasons.
            </td>
        </tr>
        <tr>
            <td>5</td>
            <td>
	      People who are not smartphone users must be part of the new Digital Identity ecosystem.
	    </td>
            <td>
	      A substantial part of the world's population belongs to this category.  This part is key for future growth opportunities
            </td>
        </tr>
        <tr>
            <td>6</td>
            <td>
	      <a>Issuer</a>s must be in the value chain.  This means that users cannot share credentials issued by
	      an issuer without allowing financial compensation for the issuer.
	    </td>
            <td>
	      This is one of the main GADI benefits compared to other approaches.
            </td>
        </tr>
        <tr>
            <td>7</td>
            <td>
	      GADI enables a push model from the issuers where when there is change in credential status,
	      latest credential information is what would be presented.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>8</td>
            <td>
	      <a>Issuer</a>s should be able to issue the credentials to users who are not part of the same network, i.e.
	      who got their <a>Trust Anchor</a> from a different Digital Address Provider (<a>DAP Agency</a>) than the one this issuer is primarily using.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>9</td>
            <td>
	      There should be cross ledger value settlements for the issuers and may be
	      some reward points for the issuers as Users assert their credentials and provide data.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>10</td>
            <td>
	      Onboard the user with a trusted Identity that is approved by an <a>Issuer</a> after proper Identity vetting
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>11</td>
            <td>
 	      It is possible for users to start their participation
	      based on a low level identity assertion and increase
	      that level over time.

	      However, there is a minmum identity assertion specified
	      by the GADI Governance Group. We need this to prevent
	      user impersonation attacks through weak ID proofing methods.

	    </td>
            <td>
	      Many users don't have connections to a <a>SP</a> which has performed strong ID proofing today.
 	      But that might change over time.  We need to support such users.
            </td>
        </tr>
        <tr>
            <td>12</td>
            <td>
	      Each <a>DAP Agency</a> provides one Single Digital Address App for the user to be able to access and control the
	      Identity and Credentials with a Digital Address Provider acting as a custodian interface to interchange the
	      user credentials on demand with user consent.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>13</td>
            <td>
	      <a>Digital Address</a> (<a>DA</a>) is a Human readable string that is easy to use, that is associated with the Users <a>Trust Anchor</a>.
	      This becomes that identifier that the user can provide to issuers to get the credentials issued.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>14</td>
            <td>
	      Users in this scenario will have a single Digital Address Application from one Digital Address Provider
	      and the user will be able to present this human readable, typable, or presentable to the issuers to be able to
	      push the credentials for the user.   This is just between users and <a>Issuer</a>s.  We however can also provide
	      different handles (Different Digital Addresses) that can be orchestrated between the user Device and <a>DAP Agency</a> to
	      present to different issuers if we need to also make DA one time as the issued credential is a <a>DID</a>.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>15</td>
            <td>
	      The GADI ledger is accessible to <a>DAP Agency</a>s only.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>16</td>
            <td>
	      <a>Trust Anchor</a>s are generated randomly by the <a>HomeDAP</a>, such that collisions do not practically occur.
	      See <a>Trust Anchor</a> Discussion below.
	      (not clear, see 20)
	    </td>
            <td>
	      So that we only need to delete the relation between the <a>Trust Anchor</a> and any other PII when the user
	      asks for account deletion (removal from GADI).
            </td>
        </tr>
        <tr>
            <td>17</td>
            <td>
	      Credentials that do not include PII shall be supported.  For example "the holder of the credential is at least 21 years old"
	      or "the holder of this credential got vaccinated against X".

Note: sometimes there are existing business processes which will convey PI/PII outside of GADI.
 	    </td>
            <td>
	      In the physical world we have those and for privacy reasons we should carry them over to the digital world.
            </td>
        </tr>
        <tr>
            <td>18</td>
            <td>
	      GADI and <a>DAP Agency</a>s do NOT persistently store personal information (PI).
	      And even pass-through of PI should be avoided.

Note: they will likely need to store PII, i.e. information related to users

Note: <a>Issuer</a>s will have to store PI (in order to be able to issue credentials)
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>19</td>
            <td>
	      GADI will store the <a>HomeDAP</a> Identifier (i.e. <a>HomeDAP_ID</a>) along with the user's <a>Trust Anchor</a>.
	      So each <a>DAP Agency</a> could ask GADI for the <a>HomeDAP</a> of a given user and would then directly talk to the user's <a>HomeDAP</a>.
	    </td>
            <td>
	      We need that for cross-<a>DAP Agency</a> communications
            </td>
        </tr>
        <tr>
            <td>20</td>
            <td>
	      We compute a Hash(firstname, last name, date of birth, country+city of birth) as either use this as
	      <a>Trust Anchor</a> or as an attribute stored along with the <a>Trust Anchor</a> in GADI.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>21</td>
            <td>
	      It shall  be possible to change the <a>HomeDAP</a> of a user (e.g. from <a>DAP Agency</a>1 to <a>DAP Agency</a>2).
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>22</td>
            <td>
	      <a>Issuer</a>s shouldn't learn the <a>SP</a> that verifies a credential.
	    </td>
            <td>
	      Privacy
            </td>
        </tr>
        <tr>
            <td>23</td>
            <td>
             <a>SP</a>s want to verify the <a>VC</a> and hence will
 	      need to decide whether they want to trust a specific
	      <a>Issuer</a>.
	      As a consequence, the <a>SP</a> will learn who the
	      <a>Issuer</a> of that <a>VC</a> is.
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>24</td>
            <td>

Issue: Need to specify what functionality/certification is needed to call an application a GADI "Digital Address Application".
	    </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>25</td>
            <td>
	      Organizational participants, including issuers, verifiers, and service providers require a publicly
	         resolvable DID
	    </td>		
            <td>
            </td>
        </tr>
        <tr>
            <td>26</td>
            <td>
	    Regional directory services include the User related information,
	    the global directory only includes information on issuers,
	    service providers abd interchanges.
	    So compliance can be managed on a regional level.
	    </td>		
            <td>
            </td>
        </tr>
        <tr>
            <td>27</td>
            <td>
	    Logically, the DAA is provided by The Agency - not the Issuer.
	    However, the Issuer could still provide the DAA on behalf
	    of The Agency.
	    </td>		
            <td>
            </td>
        </tr>
	
    </table>
</figure>

